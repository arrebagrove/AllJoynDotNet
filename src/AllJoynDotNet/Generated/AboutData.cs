// Generated from AboutData.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
//
    public partial class AboutData : AllJoynWrapper
    {
        internal AboutData(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Allocate a new empty alljoyn_aboutdata object. The default language is not set.
		/// Set the language using either one of the following functions:
		/// - alljoyn_about_setdefaultlanguage
		/// - alljoyn_about_createfrommsgarg
		/// - alljoyn_about_createfromxml
		/// </summary>
		/// <remarks>
		/// <para>The default language should be specified before any tag that requires
		/// localization. These tags are the following:
		/// - DeviceName
		/// - AppName
		/// - Manufacturer
		/// - Description
		/// </para>
		/// </remarks>
		/// <returns>The allocated alljoyn_aboutdata.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutdata_create_empty();
		// extern AJ_API alljoyn_aboutdata AJ_CALL alljoyn_aboutdata_create_empty();

		/// <summary>
		/// Allocate a new alljoyn_aboutdata object setting the default language.
		/// </summary>
		/// <param name="defaultLanguage">the default RFC 5646 language tag for the About data fields</param>
		/// <returns>The allocated alljoyn_aboutdata.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutdata_create([MarshalAs(UnmanagedType.LPStr)]string defaultLanguage);
		// extern AJ_API alljoyn_aboutdata AJ_CALL alljoyn_aboutdata_create(const char* defaultLanguage);

		/// <summary>
		/// Allocate a new alljoyn_aboutdata object filling in the fields of the About data
		/// using an alljoyn_msgarg. The provided alljoyn_msgarg must contain a dictionary
		/// with signature a{sv} with About data fields.
		/// </summary>
		/// <remarks>
		/// <para>If the passed in alljoyn_msgarg is an ill formed About data alljoyn_msgarg
		/// this call fails silently. If the alljoyn_msgarg does not come from an About
		/// Announce signal it is best to create an empty alljoyn_aboutdata object
		/// and use the alljoyn_about_createfrommsgarg function to fill in the About data.
		/// </para>
		/// </remarks>
		/// <param name="arg">alljoyn_msgarg with signature a{sv}containing About data fields.</param>
		/// <param name="language">the language of the arg alljoyn_msgarg. Use NULL for default language</param>
		/// <returns>The allocated alljoyn_aboutdata.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutdata_create_full(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API alljoyn_aboutdata AJ_CALL alljoyn_aboutdata_create_full(const alljoyn_msgarg arg,const char* language);

		/// <summary>
		/// Free an alljoyn_aboutdata object.
		/// </summary>
		/// <param name="data">The alljoyn_aboutdata to be freed.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutdata_destroy(IntPtr data);
		// extern AJ_API void AJ_CALL alljoyn_aboutdata_destroy(alljoyn_aboutdata data);

		/// <summary>
		/// Initialize the About data held by the specified alljoyn_aboutdata object
		/// from a character string containing the XML representation of the About data
		/// specified as an \<About data\> element containing \<AppId\>, \<DeviceName\>, etc.
		/// </summary>
		/// <remarks>
		/// <para>The AllJoyn software version (AJSoftwareVersion) is automatically set to
		/// the version of Alljoyn that is being used. The SupportedLanguages tag is
		/// automatically implied from the DefaultLanguage tag and the lang annotation
		/// from tags that are localizable.
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="aboutDataXml">a string that contains an XML representation ofthe About data fields.</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_createfromxml(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string aboutDataXml);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_createfromxml(alljoyn_aboutdata data,const char* aboutDataXml);

		/// <summary>
		/// Validate if the About data has all of the required fields. If a language
		/// field is given this will return if all required fields are listed for the
		/// given language. If no language is given default language will be checked.
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="language">IETF language tag specified by RFC 5646</param>
		/// <returns>true if all required field are listed for the given language</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern bool alljoyn_aboutdata_isvalid(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API bool AJ_CALL alljoyn_aboutdata_isvalid(alljoyn_aboutdata data,const char* language);

		/// <summary>
		/// Fill in the About Data fields from the given alljoyn_msgarg. This alljoyn_msgarg
		/// must contain a dictionary of type a{sv} and is expected to be either obtained
		/// from an Announce signal or from the GetAboutData method of the org.alljoyn.about
		/// interface.
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="arg">alljoyn_msgarg contain About data dictionary</param>
		/// <param name="language">the language for the alljoyn_msgarg About dataIf NULL the default language is used</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_createfrommsgarg(IntPtr data, IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_createfrommsgarg(alljoyn_aboutdata data,const alljoyn_msgarg arg,const char* language);

		/// <summary>
		/// Set the AppId for the About data
		/// </summary>
		/// <remarks>
		/// <para>AppId (the appId argument) must be a 128-bit UUID as specified by RFC 4122
		/// </para>
		/// <para>AppId IS required
		/// AppId IS part of the Announce signal
		/// AppId CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="appId">the a globally unique array of bytes used as an Id for the application</param>
		/// <param name="num">the number of bytes in the appId array</param>
		/// <returns>- ER_OK on success
		/// - #ER_ABOUT_INVALID_ABOUTDATA_FIELD_VALUE if appId is not 128-bits (16 bytes) in size</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setappid(IntPtr data, byte[] appId, UInt64 num);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setappid(alljoyn_aboutdata data,const uint8_t* appId,const size_t num);

		/// <summary>
		/// Set the AppId for the About data using a character string.
		/// </summary>
		/// <remarks>
		/// <para>The string must be a ether a 32-character hex digit string
		/// (for example "4a354637564945188a48323c158bc02d") or a UUID string as
		/// specified in RFC 4122 (for example: "4a354637-5649-4518-8a48-323c158bc02d").
		/// The AppId contained by this string must be a 128-bit UUID as specified by RFC 4122.
		/// </para>
		/// <para>AppId IS required
		/// AppId IS part of the Announce signal
		/// AppId CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="appId">the a globally unique string of characters used as an Id for the application</param>
		/// <returns>- #ER_OK on success
		/// - #ER_ABOUT_INVALID_ABOUTDATA_FIELD_VALUE if the AppId is not a 128-bits (16 bytes) in size</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setappid_fromstring(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string appId);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setappid_fromstring(alljoyn_aboutdata data,const char* appId);

		/// <summary>
		/// Get the AppId from the About data
		/// </summary>
		/// <remarks>
		/// <para>AppId IS required
		/// AppId IS part of the Announce signal
		/// AppId CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="appId">a pointer to an array of bytes used as a globally unique ID for an application</param><!-- out -->
		/// <param name="num">the size of the appId array</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getappid(IntPtr data, byte[] appId, UInt64 num);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getappid(alljoyn_aboutdata data,uint8_t** appId,size_t* num);

		/// <summary>
		/// The given language is automatically added to the SupportedLanguage list.
		/// The language tag should be an IETF language tag specified by RFC 5646.
		/// </summary>
		/// <remarks>
		/// <para>DefaultLanguage is Required
		/// DefaultLanguage is part of the Announce signal
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="defaultLanguage">the IETF language tag</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setdefaultlanguage(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string defaultLanguage);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setdefaultlanguage(alljoyn_aboutdata data,const char* defaultLanguage);

		/// <summary>
		/// Get the DefaultLanguage from the About data
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="defaultLanguage">a pointer to the default language tag</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getdefaultlanguage(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] defaultLanguage);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getdefaultlanguage(alljoyn_aboutdata data,char** defaultLanguage);

		/// <summary>
		/// Set the DeviceName to the About data
		/// </summary>
		/// <remarks>
		/// <para>DeviceName is not required
		/// DeviceName is part of the Announce signal
		/// DeviceName can be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="deviceName">the deviceName (alljoyn_aboutdata data, UTF-8 encoded string)</param>
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the DeviceName will be set for the default language</param>
		/// <returns>- #ER_OK on success
		/// - #ER_ABOUT_DEFAULT_LANGUAGE_NOT_SPECIFIED if language tag was not specified
		/// and the default language is also
		/// not found.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setdevicename(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string deviceName, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setdevicename(alljoyn_aboutdata data,const char* deviceName,const char* language);

		/// <summary>
		/// Get the DeviceName from the About data
		/// </summary>
		/// <remarks>
		/// <para>DeviceName is not required
		/// DeviceName is part of the Announce signal
		/// DeviceName can be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="deviceName">the deviceName found in the About data (alljoyn_aboutdata data, UTF-8 encoded string)</param><!-- out -->
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the DeviceName for the default language will be returned</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getdevicename(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] deviceName, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getdevicename(alljoyn_aboutdata data,char** deviceName,const char* language);

		/// <summary>
		/// Set the DeviceId from the About data
		/// </summary>
		/// <remarks>
		/// <para>DeviceId IS required
		/// DeviceId IS part of the announce signal
		/// DeviceId CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="deviceId">is a string with a value generated using platform specific means</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setdeviceid(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string deviceId);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setdeviceid(alljoyn_aboutdata data,const char* deviceId);

		/// <summary>
		/// Get the DeviceId from the About data
		/// </summary>
		/// <remarks>
		/// <para>DeviceId IS required
		/// DeviceId IS part of the announce signal
		/// DeviceId CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="deviceId">UTF-8 string with a value generated using platform specific means</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getdeviceid(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] deviceId);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getdeviceid(alljoyn_aboutdata data,char** deviceId);

		/// <summary>
		/// Set the AppName to the About data
		/// </summary>
		/// <remarks>
		/// <para>AppName is required
		/// AppName is part of the announce signal
		/// AppName can be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="appName">the AppName (alljoyn_aboutdata data, UTF-8 encoded string)</param>
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the AppName will be set for the default language.</param>
		/// <returns>- #ER_OK on success
		/// - #ER_ABOUT_DEFAULT_LANGUAGE_NOT_SPECIFIED if language tag was not specified
		/// and the default language is also
		/// not found.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setappname(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string appName, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setappname(alljoyn_aboutdata data,const char* appName,const char* language);

		/// <summary>
		/// Get the AppName from the About data
		/// </summary>
		/// <remarks>
		/// <para>AppName is required
		/// AppName is part of the announce signal
		/// AppName can be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="appName">the AppName found in the About data (alljoyn_aboutdata data, UTF-8 encoded string)</param><!-- out -->
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the AppName for the default language will be returned.</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getappname(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] appName, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getappname(alljoyn_aboutdata data,char** appName,const char* language);

		/// <summary>
		/// Set the Manufacturer to the About data
		/// </summary>
		/// <remarks>
		/// <para>Manufacturer is required
		/// Manufacturer is part of the announce signal
		/// Manufacturer can be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="manufacturer">the Manufacturer (alljoyn_aboutdata data, UTF-8 encoded string)</param>
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the Manufacture will be set for the default language.</param>
		/// <returns>- #ER_OK on success
		/// - #ER_ABOUT_DEFAULT_LANGUAGE_NOT_SPECIFIED if language tag was not specified
		/// and the default language is also
		/// not found.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setmanufacturer(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string manufacturer, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setmanufacturer(alljoyn_aboutdata data,const char* manufacturer,const char* language);

		/// <summary>
		/// Get the Manufacturer from the About data
		/// </summary>
		/// <remarks>
		/// <para>Manufacturer is required
		/// Manufacturer is part of the announce signal
		/// Manufacturer can be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="manufacturer">the Manufacturer found in the About data (alljoyn_aboutdata data, UTF-8 encoded string)</param><!-- out -->
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the Manufacturer for the default language will be returned.</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getmanufacturer(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] manufacturer, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getmanufacturer(alljoyn_aboutdata data,char** manufacturer,const char* language);

		/// <summary>
		/// Set the ModelNumber to the About data
		/// </summary>
		/// <remarks>
		/// <para>ModelNumber is required
		/// ModelNumber is part of the announce signal
		/// ModelNumber can not be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="modelNumber">the application model number</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setmodelnumber(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string modelNumber);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setmodelnumber(alljoyn_aboutdata data,const char* modelNumber);

		/// <summary>
		/// Get the ModelNumber from the About data
		/// </summary>
		/// <remarks>
		/// <para>ModelNumber IS required
		/// ModelNumber IS part of the announce signal
		/// ModelNumber CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="modelNumber">the application model number</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getmodelnumber(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] modelNumber);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getmodelnumber(alljoyn_aboutdata data,char** modelNumber);

		/// <summary>
		/// Set a supported language.
		/// </summary>
		/// <remarks>
		/// <para>This is a string representing the a single language. The language is
		/// specified using IETF language tags specified by the RFC 5646.
		/// </para>
		/// <para>If the language tag has already been added ER_OK will be returned with no
		/// additional changes being made.
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="language">the IETF language tag</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setsupportedlanguage(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setsupportedlanguage(alljoyn_aboutdata data,const char* language);

		/// <summary>
		/// Get an array of supported languages
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="languageTags">a pointer to a languageTags array to receive thelanguage tags. Can be NULL in which case no
		/// language tags are returned and the return value gives
		/// the number of language tags available.</param>
		/// <param name="num">the size of the languageTags array.</param>
		/// <returns>The number of languageTags returned or the total number oflanguage tags if languageTags is NULL.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_aboutdata_getsupportedlanguages(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)]string[] languageTags, UInt64 num);
		// extern AJ_API size_t AJ_CALL alljoyn_aboutdata_getsupportedlanguages(alljoyn_aboutdata data,const char** languageTags,size_t num);

		/// <summary>
		/// Set the Description to the About data
		/// </summary>
		/// <remarks>
		/// <para>Description IS required
		/// Description IS NOT part of the announce signal
		/// Description CAN BE localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="description">the Description (alljoyn_aboutdata data, UTF-8 encoded string)</param>
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the Description will be set for the default language.</param>
		/// <returns>- #ER_OK on success
		/// - #ER_ABOUT_DEFAULT_LANGUAGE_NOT_SPECIFIED if language tag was not specified and
		/// the default language is also not found.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setdescription(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string description, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setdescription(alljoyn_aboutdata data,const char* description,const char* language);

		/// <summary>
		/// Get the Description from the About data
		/// </summary>
		/// <remarks>
		/// <para>Description IS required
		/// Description IS NOT part of the announce signal
		/// Description CAN BE localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="description">the Description found in the About data (alljoyn_aboutdata data, UTF-8 encoded string)</param><!-- out -->
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the Description for the default language will be returned.</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getdescription(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] description, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getdescription(alljoyn_aboutdata data,char** description,const char* language);

		/// <summary>
		/// Set the DateOfManufacture to the About data
		/// </summary>
		/// <remarks>
		/// <para>The date of manufacture using the format YYYY-MM-DD.  Known as XML
		/// DateTime format.
		/// </para>
		/// <para>DateOfManufacture IS NOT required
		/// DateOfManufacture IS NOT part of the announce signal
		/// DateOfManufacture CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="dateOfManufacture">the date of manufacture using YYYY-MM-DD format</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setdateofmanufacture(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string dateOfManufacture);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setdateofmanufacture(alljoyn_aboutdata data,const char* dateOfManufacture);

		/// <summary>
		/// Get the DateOfManufacture from the About data
		/// </summary>
		/// <remarks>
		/// <para>The date of manufacture using the format YYYY-MM-DD.  Known as XML
		/// DateTime format.
		/// </para>
		/// <para>DateOfManufacture IS NOT required
		/// DateOfManufacture IS NOT part of the announce signal
		/// DateOfManufacture CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="dateOfManufacture">the date of manufacture using YYYY-MM-DD format</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getdateofmanufacture(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] dateOfManufacture);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getdateofmanufacture(alljoyn_aboutdata data,char** dateOfManufacture);

		/// <summary>
		/// Set the SoftwareVersion to the About data
		/// </summary>
		/// <remarks>
		/// <para>SoftwareVersion IS required
		/// SoftwareVersion IS NOT part of the announce signal
		/// SoftwareVersion CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="softwareVersion">the software version for the OEM software</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setsoftwareversion(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string softwareVersion);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setsoftwareversion(alljoyn_aboutdata data,const char* softwareVersion);

		/// <summary>
		/// Get the SoftwareVersion from the About data
		/// </summary>
		/// <remarks>
		/// <para>SoftwareVersion IS required
		/// SoftwareVersion IS NOT part of the announce signal
		/// SoftwareVersion CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="softwareVersion">the software version for the OEM software</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getsoftwareversion(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] softwareVersion);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getsoftwareversion(alljoyn_aboutdata data,char** softwareVersion);

		/// <summary>
		/// Get the AJSoftwareVersion from the About data
		/// </summary>
		/// <remarks>
		/// <para>The AJSoftwareVersion is automatically set when the About data is created
		/// or when it is read from remote device.
		/// </para>
		/// <para>AJSoftwareVersion IS required
		/// AJSoftwareVersion IS NOT part of the announce signal
		/// AJSoftwareVersion CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="ajSoftwareVersion">the current version of AllJoyn SDK utilizedby the application</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getajsoftwareversion(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] ajSoftwareVersion);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getajsoftwareversion(alljoyn_aboutdata data,char** ajSoftwareVersion);

		/// <summary>
		/// Set the HardwareVersion to the About data
		/// </summary>
		/// <remarks>
		/// <para>HardwareVersion IS NOT required
		/// HardwareVersion IS NOT part of the announce signal
		/// HardwareVersion CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="hardwareVersion">the device hardware version</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_sethardwareversion(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string hardwareVersion);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_sethardwareversion(alljoyn_aboutdata data,const char* hardwareVersion);

		/// <summary>
		/// Get the HardwareVersion from the About data
		/// </summary>
		/// <remarks>
		/// <para>HardwareVersion IS NOT required
		/// HardwareVersion IS NOT part of the announce signal
		/// HardwareVersion CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="hardwareVersion">the device hardware version</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_gethardwareversion(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] hardwareVersion);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_gethardwareversion(alljoyn_aboutdata data,char** hardwareVersion);

		/// <summary>
		/// Set the SupportUrl to the About data
		/// </summary>
		/// <remarks>
		/// <para>SupportUrl IS NOT required
		/// SupportUrl IS NOT part of the announce signal
		/// SupportUrl CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="supportUrl">the support URL to be populated by OEM</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setsupporturl(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string supportUrl);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setsupporturl(alljoyn_aboutdata data,const char* supportUrl);

		/// <summary>
		/// Get the SupportUrl from the About data
		/// </summary>
		/// <remarks>
		/// <para>SupportUrl IS NOT required
		/// SupportUrl IS NOT part of the announce signal
		/// SupportUrl CAN NOT be localized for other languages
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="supportUrl">the support URL</param><!-- out -->
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getsupporturl(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] supportUrl);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getsupporturl(alljoyn_aboutdata data,char** supportUrl);

		/// <summary>
		/// Generic way to set a new field.  Everything could be done this way.
		/// </summary>
		/// <remarks>
		/// <para>Unless the generic field is one of the pre-defined fields when they are
		/// set they will have the following specifications
		/// NOT required
		/// NOT part of the announce signal
		/// CAN be localized
		/// </para>
		/// <para>Since every field can be localized even if the field is not localized it
		/// must be set for every language.
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="name">the name of the field to set</param>
		/// <param name="value">a alljoyn_msgarg that contains the value that is set for the field</param>
		/// <param name="language">the IETF language tag specified by RFC 5646if language is NULL the default language will be used.  Only
		/// used for fields that are marked as localizable.</param>
		/// <returns>- #ER_OK on success
		/// - #ER_ABOUT_DEFAULT_LANGUAGE_NOT_SPECIFIED if language tag was not specified
		/// and the default language is also
		/// not found.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_setfield(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string name, IntPtr value, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_setfield(alljoyn_aboutdata data,const char* name,alljoyn_msgarg value,const char* language);

		/// <summary>
		/// Generic way to get a field.
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="name">the name of the field to get</param>
		/// <param name="value">alljoyn_msgarg holding a variant value that represents the field</param><!-- out -->
		/// <param name="language">the IETF language tag specified by RFC 5646If language is NULL the field for the default language will be returned.</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getfield(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string name, IntPtr value, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getfield(alljoyn_aboutdata data,const char* name,alljoyn_msgarg* value,const char* language);

		/// <summary>
		/// Get a list of the fields contained in this alljoyn_aboutdata object.
		/// This is required if the About data comes from a remote source. User defined fields
		/// are permitted. Use the GetFields method to get a list of all fields
		/// currently found known by the alljoyn_aboutdata.
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="fields">an array of const char* that will contain all the strings</param><!-- out -->
		/// <param name="num_fields">the size of the array</param>
		/// <returns>The number of fields returned or the total number of fields if the fields parameter is NULL</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_aboutdata_getfields(IntPtr data, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] fields, UInt64 num_fields);
		// extern AJ_API size_t AJ_CALL alljoyn_aboutdata_getfields(alljoyn_aboutdata data,const char** fields,size_t num_fields);

		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getaboutdata(IntPtr data, IntPtr msgArg, [MarshalAs(UnmanagedType.LPStr)]string language);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getaboutdata(alljoyn_aboutdata data,alljoyn_msgarg msgArg,const char* language);

		/// <summary>
		/// Return a alljoyn_msgarg pointer containing dictionary containing the About data that
		/// is announced with the org.alljoyn.About.announce signal.
		/// This will always be the default language and will only contain the fields
		/// that are announced.
		/// </summary>
		/// <remarks>
		/// <para>The fields that will be part of the announced alljoyn_msgarg are:
		/// - AppId
		/// - DefaultLanguage
		/// - DeviceName
		/// - DeviceId
		/// - AppName
		/// - Manufacture
		/// - ModelNumber
		/// </para>
		/// <para>If you require other fields or need the localized About data the
		/// org.alljoyn.About.GetAboutData method can be used.
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="msgArg">a alljoyn_msgarg dictionary with the a{sv} that contains the Announcedata.</param><!-- out -->
		/// <returns>ER_OK if successful</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutdata_getannouncedaboutdata(IntPtr data, IntPtr msgArg);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutdata_getannouncedaboutdata(alljoyn_aboutdata data,alljoyn_msgarg msgArg);

		/// <summary>
		/// Is the given field name required to make an About announcement
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="fieldName">the name of the field</param>
		/// <returns>- true if the field is required to make an About announcement
		/// - false otherwise.  If the fieldName is unknown false will be returned</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern bool alljoyn_aboutdata_isfieldrequired(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string fieldName);
		// extern AJ_API bool AJ_CALL alljoyn_aboutdata_isfieldrequired(alljoyn_aboutdata data,const char* fieldName);

		/// <summary>
		/// Is the given field part of the announce signal
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="fieldName">the name of the field</param>
		/// <returns>- true if the field is part of the announce signal
		/// - false otherwise.  If the fieldName is unknown false will be returned</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern bool alljoyn_aboutdata_isfieldannounced(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string fieldName);
		// extern AJ_API bool AJ_CALL alljoyn_aboutdata_isfieldannounced(alljoyn_aboutdata data,const char* fieldName);

		/// <summary>
		/// Is the given field a localized field.
		/// </summary>
		/// <remarks>
		/// <para>Localized fields should be provided for every supported language
		/// </para>
		/// </remarks>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="fieldName">the name of the field</param>
		/// <returns>- true if the field is a localizable value
		/// - false otherwise. If the fieldName is unknown false will be returned.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern bool alljoyn_aboutdata_isfieldlocalized(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string fieldName);
		// extern AJ_API bool AJ_CALL alljoyn_aboutdata_isfieldlocalized(alljoyn_aboutdata data,const char* fieldName);

		/// <summary>
		/// Get the signature for the given field.
		/// </summary>
		/// <param name="data">alljoyn_aboutdata object this call is made for</param>
		/// <param name="fieldName">the name of the field</param>
		/// <returns>- the signature of the field
		/// - NULL is field is unknown</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutdata_getfieldsignature(IntPtr data, [MarshalAs(UnmanagedType.LPStr)]string fieldName);
		// extern AJ_API const char* AJ_CALL alljoyn_aboutdata_getfieldsignature(alljoyn_aboutdata data,const char* fieldName);


    }
}