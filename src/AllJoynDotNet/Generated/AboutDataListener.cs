// Generated from AboutDataListener.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Type for the GetAboutData callback.
		/// </summary>
		/// <remarks>
		/// <para>This callback is invoked to create the alljoyn_msgarg that is returned when
		/// a user calls org.alljoyn.About.GetAboutData. The returned alljoyn_msgarg contains
		/// the AboutData dictionary for the specified language.
		/// </para>
		/// <para>The alljoyn_msgarg must contain the signature `a{sv}`.
		/// </para>
		/// <para>Custom fields are allowed. Since the proxy object only receives the field
		/// name and the alljoyn_msgarg containing the contents of that for that field
		/// the default assumption is that user defined fields are:
		/// - not required
		/// - not announced
		/// - localized if the alljoyn_msgarg contains a String (not localized otherwise)
		/// </para>
		/// <para>Important: All implementations of GetAboutData should handle language
		/// specified as an empty string or NULL. In the case that the language is
		/// not specified the GetAboutData is expected to return the default language.
		/// </para>
		/// <para>If the language tag given is not supported return the QStatus
		/// #ER_LANGUAGE_NOT_SUPPORTED. If the user has not provided ALL of the
		/// required fields return the QStatus #ER_ABOUT_ABOUTDATA_MISSING_REQUIRED_FIELD
		/// </para>
		/// </remarks>
		/// <param name="context">the context pointer that was passed into thealljoyn_aboutdatalistener_create function</param>
		/// <param name="msgArg">dictionary containing all of the AboutData fields forthe specified language.  If language is not specified the default
		/// language will be returned</param><!-- out -->
		/// <param name="language">IETF language tags specified by RFC 5646 if the stringis NULL or an empty string the MsgArg for the default
		/// language will be returned</param>
		/// <returns>- #ER_OK on successful
		/// - #ER_LANGUAGE_NOT_SUPPORTED if language is not supported
		/// - #ER_ABOUT_ABOUTDATA_MISSING_REQUIRED_FIELD if a required field is missing
		/// - other error indicating failure</returns>
		internal delegate QStatus alljoyn_aboutdatalistener_getaboutdata_ptr(IntPtr context, IntPtr msgArg, [MarshalAs(UnmanagedType.LPStr)]string language);
		// typedef QStatus (AJ_CALL * alljoyn_aboutdatalistener_getaboutdata_ptr)(const void* context,
		// alljoyn_msgarg msgArg,
		// const char* language);
		// 

		/// <summary>
		/// Type for the GetAnnouncedAboutData callback.
		/// </summary>
		/// <remarks>
		/// <para>This callback is invoked to return an alljoyn_msgarg object containing
		/// a dictionary with the Announce portion of the AboutData.
		/// </para>
		/// <para>The Announced values must use the default language and must only contain
		/// the fields that are announced.
		/// </para>
		/// <para>The fields required to be part of the announced alljoyn_msgarg are:
		/// - AppId
		/// - DefaultLanguage
		/// - DeviceName (Optional since v14.12)
		/// - DeviceId
		/// - AppName
		/// - Manufacture
		/// - ModelNumber
		/// </para>
		/// <para>To read other fields or get the localized value of a field use the
		/// org.alljoyn.About.GetAboutData method. This method is available using the
		/// AboutProxy class.
		/// </para>
		/// </remarks>
		/// <param name="context">the context pointer that was passed into thealljoyn_aboutdatalistener_create function</param>
		/// <param name="msgArg">an alljoyn_msgarg dictionary with the a{sv} that containsthe Announce data</param><!-- out -->
		/// <returns>ER_OK if successful</returns>
		internal delegate QStatus alljoyn_aboutdatalistener_getannouncedaboutdata_ptr(IntPtr context, IntPtr msgArg);
		// typedef QStatus (AJ_CALL * alljoyn_aboutdatalistener_getannouncedaboutdata_ptr)(const void* context,
		// alljoyn_msgarg msgArg);
		// 

		/// <summary>
		/// Struct containing callbacks used for creation of an alljoyn_aboutdatalistener.
		/// </summary>
		/// 
		[StructLayout(LayoutKind.Sequential)]
		internal partial class alljoyn_aboutdatalistener_callbacks
		{
			public alljoyn_aboutdatalistener_getaboutdata_ptr about_datalistener_getaboutdata;
			public alljoyn_aboutdatalistener_getannouncedaboutdata_ptr about_datalistener_getannouncedaboutdata;
			//
			///**
			//* Handler to get the complete alljoyn_aboutdata for a given language
			//*/
			//alljoyn_aboutdatalistener_getaboutdata_ptr about_datalistener_getaboutdata;
			///**
			//* Handler to get the announced alljoyn_aboutdata for the default language
			//*/
			//alljoyn_aboutdatalistener_getannouncedaboutdata_ptr about_datalistener_getannouncedaboutdata;
			//
		}
		// typedef struct {
		// /**
		// * Handler to get the complete alljoyn_aboutdata for a given language
		// */
		// alljoyn_aboutdatalistener_getaboutdata_ptr about_datalistener_getaboutdata;
		// /**
		// * Handler to get the announced alljoyn_aboutdata for the default language
		// */
		// alljoyn_aboutdatalistener_getannouncedaboutdata_ptr about_datalistener_getannouncedaboutdata;
		// } alljoyn_aboutdatalistener_callbacks;
		// 

//
    public partial class AboutDataListener : AllJoynWrapper
    {
        internal AboutDataListener(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Create a new alljoyn_aboutdatalistener object.
		/// This object will invoke the provided callbacks passing in the provided context.
		/// </summary>
		/// <returns>The allocated alljoyn_aboutdatalistener.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutdatalistener_create(alljoyn_aboutdatalistener_callbacks callbacks, IntPtr context);
		// extern AJ_API alljoyn_aboutdatalistener AJ_CALL alljoyn_aboutdatalistener_create(const alljoyn_aboutdatalistener_callbacks* callbacks,const void* context);

		/// <summary>
		/// Free an alljoyn_aboutdatalistener object.
		/// </summary>
		/// <param name="listener">The alljoyn_aboutdatalistener to be freed.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutdatalistener_destroy(IntPtr listener);
		// extern AJ_API void AJ_CALL alljoyn_aboutdatalistener_destroy(alljoyn_aboutdatalistener listener);


    }
}