// Generated from AboutObj.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
//
    public partial class AboutObj : AllJoynWrapper
    {
        internal AboutObj(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Allocate a new About object as an alljoyn_aboutobj
		/// </summary>
		/// <remarks>
		/// <para>This object is responsible for transmitting information about the
		/// interfaces that are available for other applications to use. It also
		/// provides application specific information that is contained in the
		/// alljoyn_aboutdata object and helps applications to respond to certain
		/// requests concerning the interfaces.
		/// </para>
		/// <para>By default the org.alljoyn.About interface is excluded from the list of
		/// announced interfaces. Since simply receiving the announce signal tells
		/// the client that the service implements the org.alljoyn.About interface.
		/// Changing the isAnnounced flag from UNANNOUNCED, its default, to ANNOUNCED,
		/// will cause the org.alljoyn.About interface to be part of the announce signal.
		/// Unless the application is talking with a legacy application that expects
		/// the org.alljoyn.About interface to be part of the announce signal it is best
		/// to leave the isAnnounced to use its default value.
		/// </para>
		/// </remarks>
		/// <param name="bus">the alljoyn_busattachment that will contain the about information</param>
		/// <param name="isAnnounced">will the org.alljoyn.About interface be part of the announced interfaces.</param>
		/// <returns>allocated alljoyn_aboutobj</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutobj_create(IntPtr bus, alljoyn_about_announceflag isAnnounced);
		// extern AJ_API alljoyn_aboutobj AJ_CALL alljoyn_aboutobj_create(alljoyn_busattachment bus,alljoyn_about_announceflag isAnnounced);

		/// <summary>
		/// Free an alljoyn_aboutobj object.
		/// </summary>
		/// <param name="obj">The alljoyn_aboutobj to be freed.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern void alljoyn_aboutobj_destroy(IntPtr obj);
		// extern AJ_API void AJ_CALL alljoyn_aboutobj_destroy(alljoyn_aboutobj obj);

		/// <summary>
		/// This is used to send the Announce signal.  It announces the list of all
		/// interfaces available at given object paths as well as the announced
		/// fields from the About data.
		/// </summary>
		/// <remarks>
		/// <para>This method will automatically obtain the announced object description from the
		/// alljoyn_busattachment that was used to create the alljoyn_aboutobj. Only alljoyn_busattachment
		/// objects that have marked their interfaces as announced and are registered will be announced.
		/// </para>
		/// </remarks>
		/// <param name="obj">the alljoyn_aboutobj object this call is made for</param>
		/// <param name="sessionPort">the session port the interfaces can be connected with</param>
		/// <param name="aboutData">the alljoyn_aboutdata that contains the About data for this announce signal</param>
		/// <returns>- ER_OK on success
		/// - ER_ABOUT_SESSIONPORT_NOT_BOUND if the SessionPort given is not bound</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern QStatus alljoyn_aboutobj_announce(IntPtr obj, UInt16 sessionPort, IntPtr aboutData);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutobj_announce(alljoyn_aboutobj obj,alljoyn_sessionport sessionPort,alljoyn_aboutdata aboutData);

		/// <summary>
		/// Cancel the last announce signal sent. If no signals have been sent this
		/// method call will return.
		/// </summary>
		/// <param name="obj">the AllJoyn About object</param>
		/// <returns>- ER_OK on success
		/// - annother status indicating failure.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern QStatus alljoyn_aboutobj_unannounce(IntPtr obj);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutobj_unannounce(alljoyn_aboutobj obj);


    }
}