// Generated from AboutObjectDescription.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
//
    public partial class AboutObjectDescription : AllJoynWrapper
    {
        internal AboutObjectDescription(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Allocate a new empty alljoyn_aboutobjectdescription object.
		/// Use the alljoyn_aboutobjectdescription_createfrommsgarg method to fill in data.
		/// </summary>
		/// <returns>The allocated alljoyn_aboutobjectdescription.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutobjectdescription_create();
		// extern AJ_API alljoyn_aboutobjectdescription AJ_CALL alljoyn_aboutobjectdescription_create();

		/// <summary>
		/// Allocate a new alljoyn_aboutdata object filling in the fields of the About data
		/// using an alljoyn_msgarg. The provided alljoyn_msgarg must contain a dictionary
		/// with signature a{sv} with About data fields.
		/// </summary>
		/// <remarks>
		/// <para>If the passed in alljoyn_msgarg is an ill formed About data alljoyn_msgarg this call
		/// will fail silently. If the alljoyn_msgarg does not come from About Announce signal
		/// it is best to create an empty alljoyn_aboutdata object and use the
		/// alljoyn_about_createfrommsgarg function to fill in the About data.
		/// </para>
		/// <para>Allocate a new alljoyn_aboutobjectdescription object filling in the data
		/// from an alljoyn_msgarg.
		/// </para>
		/// <para>The alljoyn_msgarg must contain an array of type a(oas) The expected use of this
		/// object is to fill in the object description using an alljoyn_msgarg obtained from
		/// the Announce signal or the GetObjectDescription method from org.alljoyn.About interface.
		/// </para>
		/// <para>If the arg came from the org.alljoyn.About.Announce signal or the
		/// org.alljoyn.AboutGetObjectDescrption method then it can be used to create
		/// the alljoyn_aboutobjectdescription. If the arg came from any other source
		/// it is recommended to create first an empty alljoyn_aboutobjectdescription object
		/// and use the alljoyn_aboutobjectdescription_createfrommsgarg.
		/// </para>
		/// </remarks>
		/// <param name="arg">alljoyn_msgarg contain About Object Description data</param>
		/// <returns>The allocated alljoyn_aboutobjectdescription.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutobjectdescription_create_full(IntPtr arg);
		// extern AJ_API alljoyn_aboutobjectdescription AJ_CALL alljoyn_aboutobjectdescription_create_full(const alljoyn_msgarg arg);

		/// <summary>
		/// Fill in the ObjectDescription fields using an alljoyn_msgarg
		/// </summary>
		/// <remarks>
		/// <para>The alljoyn_msgarg must contain an array of type a(oas) The expected use
		/// of this object is to fill in the ObjectDescription using a MsgArg obtain
		/// from the Announce signal or the GetObjectDescription method from
		/// the org.alljoyn.about interface.
		/// </para>
		/// </remarks>
		/// <param name="description">The alljoyn_aboutobjectdescription object this call is made for</param>
		/// <param name="arg">alljoyn_msgarg contain About data dictionary</param>
		/// <returns>ER_OK on success</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutobjectdescription_createfrommsgarg(IntPtr description, IntPtr arg);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutobjectdescription_createfrommsgarg(alljoyn_aboutobjectdescription description,const alljoyn_msgarg arg);

		/// <summary>
		/// Free an alljoyn_aboutobjectdescription object.
		/// </summary>
		/// <param name="description">The alljoyn_aboutobjectdescription to be freed.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutobjectdescription_destroy(IntPtr description);
		// extern AJ_API void AJ_CALL alljoyn_aboutobjectdescription_destroy(alljoyn_aboutobjectdescription description);

		/// <summary>
		/// Get a list of the paths that are added to this AboutObjectDescription.
		/// </summary>
		/// <param name="description">the alljoyn_aboutobjectdescription object this call is made for</param>
		/// <param name="paths">array of paths</param><!-- out -->
		/// <param name="numPaths">the number of paths</param>
		/// <returns>The total number of paths found in the AboutObjectDescription.  If this
		/// number is larger than `numPaths` then only `numPaths` of paths will be
		/// returned in the `paths` array.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_aboutobjectdescription_getpaths(IntPtr description, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] paths, UInt64 numPaths);
		// extern AJ_API size_t AJ_CALL alljoyn_aboutobjectdescription_getpaths(alljoyn_aboutobjectdescription description,const char** paths,size_t numPaths);

		/// <summary>
		/// Get a list of interfaces advertised at the given path that are part of
		/// this AboutObjectDescription.
		/// </summary>
		/// <param name="description">the alljoyn_aboutobjectdescription object this call is made for</param>
		/// <param name="path">the path we want to get a list of interfaces for</param>
		/// <param name="interfaces">array of interface names</param><!-- out -->
		/// <param name="numInterfaces">number of interface names</param>
		/// <returns>The total number of interfaces found in the AboutObjectDescription for
		/// the specified path.  If this number is larger than `numInterfaces`
		/// then only `numInterfaces` of interfaces will be returned in the
		/// `interfaces` array.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_aboutobjectdescription_getinterfaces(IntPtr description, [MarshalAs(UnmanagedType.LPStr)]string path, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] interfaces, UInt64 numInterfaces);
		// extern AJ_API size_t AJ_CALL alljoyn_aboutobjectdescription_getinterfaces(alljoyn_aboutobjectdescription description,const char* path,const char** interfaces,size_t numInterfaces);

		/// <summary>
		/// Get a list of the paths for a given interface. Its possible to have the
		/// same interface listed under multiple paths.
		/// </summary>
		/// <param name="description">the alljoyn_aboutobjectdescription object this call is made for</param>
		/// <param name="interfaceName">the interface we want to get a list of paths for</param>
		/// <param name="paths">array of paths</param><!-- out -->
		/// <param name="numPaths">the number of paths</param>
		/// <returns>The total number of paths found in the AboutObjectDescription for
		/// the specified path.  If this number its larger than the `numPaths`
		/// then only `numPaths` of interfaces will be returned in the `paths`
		/// array</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_aboutobjectdescription_getinterfacepaths(IntPtr description, [MarshalAs(UnmanagedType.LPStr)]string interfaceName, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] paths, UInt64 numPaths);
		// extern AJ_API size_t AJ_CALL alljoyn_aboutobjectdescription_getinterfacepaths(alljoyn_aboutobjectdescription description,const char* interfaceName,const char** paths,size_t numPaths);

		/// <summary>
		/// Clear all the contents of this AboutObjectDescription
		/// </summary>
		/// <param name="description">The alljoyn_aboutobjectdescription object this call is made for</param>
		/// <returns>ER_OK</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_aboutobjectdescription_clear(IntPtr description);
		// extern AJ_API void AJ_CALL alljoyn_aboutobjectdescription_clear(alljoyn_aboutobjectdescription description);

		/// <summary>
		/// Returns true if the given path is found
		/// </summary>
		/// <param name="description">the alljoyn_aboutobjectdescription object this call is made for</param>
		/// <param name="path">BusObject path</param>
		/// <returns>true if the path is found</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern bool alljoyn_aboutobjectdescription_haspath(IntPtr description, [MarshalAs(UnmanagedType.LPStr)]string path);
		// extern AJ_API bool AJ_CALL alljoyn_aboutobjectdescription_haspath(alljoyn_aboutobjectdescription description,const char* path);

		/// <summary>
		/// Returns true if the given interface name is found in any path
		/// </summary>
		/// <param name="description">the alljoyn_aboutobjectdescription object this call is made for</param>
		/// <param name="interfaceName">the name of the interface you are looking for</param>
		/// <returns>true if the interface is found</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern bool alljoyn_aboutobjectdescription_hasinterface(IntPtr description, [MarshalAs(UnmanagedType.LPStr)]string interfaceName);
		// extern AJ_API bool AJ_CALL alljoyn_aboutobjectdescription_hasinterface(alljoyn_aboutobjectdescription description,const char* interfaceName);

		/// <summary>
		/// Returns true if the given interface name is found at the given path
		/// </summary>
		/// <param name="description">the alljoyn_aboutobjectdescription object this call is made for</param>
		/// <param name="path">path name of the interface</param>
		/// <param name="interfaceName">the name of the interface you are looking for</param>
		/// <returns>true if the interface is found at the given path</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern bool alljoyn_aboutobjectdescription_hasinterfaceatpath(IntPtr description, [MarshalAs(UnmanagedType.LPStr)]string path, [MarshalAs(UnmanagedType.LPStr)]string interfaceName);
		// extern AJ_API bool AJ_CALL alljoyn_aboutobjectdescription_hasinterfaceatpath(alljoyn_aboutobjectdescription description,const char* path,const char* interfaceName);

		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_aboutobjectdescription_getmsgarg(IntPtr description, IntPtr msgArg);
		// extern AJ_API QStatus AJ_CALL alljoyn_aboutobjectdescription_getmsgarg(alljoyn_aboutobjectdescription description,alljoyn_msgarg msgArg);


    }
}