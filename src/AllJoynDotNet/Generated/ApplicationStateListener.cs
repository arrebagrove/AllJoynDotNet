// Generated from ApplicationStateListener.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Type for the ApplicationState callback.
		/// </summary>
		/// <remarks>
		/// <para>Handler for the org.allseen.Bus.Application's State sessionless signal.
		/// </para>
		/// </remarks>
		/// <param name="busName">Unique name of the remote BusAttachment that sent the State signal.</param>
		/// <param name="publicKey">The remote application's public key in PEM format.</param>
		/// <param name="applicationState">The application state.</param>
		/// <param name="context">Application context that was passed in "alljoyn_applicationstatelistener_create".</param>
		/// 
		internal delegate void alljoyn_applicationstatelistener_state_ptr(IntPtr busName, IntPtr publicKey, alljoyn_applicationstate applicationState, IntPtr context);
		// typedef void (AJ_CALL * alljoyn_applicationstatelistener_state_ptr)(AJ_PCSTR busName,
		// AJ_PCSTR publicKey,
		// alljoyn_applicationstate applicationState,
		// void* context);
		// 

		/// <summary>
		/// Structure used during alljoyn_applicationstatelistener_callbacks_create to provide callbacks into the listener.
		/// </summary>
		/// 
		[StructLayout(LayoutKind.Sequential)]
		internal partial class alljoyn_applicationstatelistener_callbacks
		{
			public alljoyn_applicationstatelistener_state_ptr state;
			//
			///**
			//* Application state changed callback
			//*/
			//alljoyn_applicationstatelistener_state_ptr state;
			//
		}
		// typedef struct {
		// /**
		// * Application state changed callback
		// */
		// alljoyn_applicationstatelistener_state_ptr state;
		// } alljoyn_applicationstatelistener_callbacks;
		// 

//
    public partial class ApplicationStateListener : AllJoynWrapper
    {
        internal ApplicationStateListener(IntPtr handle) : base(handle) { }

    }
}