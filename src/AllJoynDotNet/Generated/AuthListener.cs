// Generated from AuthListener.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Type for the RequestCredentials callback.
		/// </summary>
		/// <remarks>
		/// <para>Authentication mechanism requests user credentials. If the user name is not an empty string
		/// the request is for credentials for that specific user. A count allows the listener to decide
		/// whether to allow or reject multiple authentication attempts to the same peer.
		/// </para>
		/// <para>An implementation must provide an alljoyn_authlistener_callbacks or
		/// an alljoyn_authlistenerasync_callbacks but not both.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer passed into the alljoyn_authlistener_create function</param>
		/// <param name="authMechanism">The name of the authentication mechanism issuing the request.</param>
		/// <param name="peerName">The name of the remote peer being authenticated.  On the initiatingside this will be a well-known-name for the remote peer. On the
		/// accepting side this will be the unique bus name for the remote peer.</param>
		/// <param name="authCount">Count (starting at 1) of the number of authentication request attempts made.</param>
		/// <param name="userName">The user name for the credentials being requested.</param>
		/// <param name="credMask">A bit mask identifying the credentials being requested. The applicationmay return none, some or all of the requested credentials.</param>
		/// <param name="credentials">The credentials returned.</param><!-- out -->
		/// <returns>The caller should return true if the request is being accepted or false if therequests is being rejected. If the request is rejected the authentication is
		/// complete.</returns>
		internal delegate Int32 alljoyn_authlistener_requestcredentials_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string authMechanism, [MarshalAs(UnmanagedType.LPStr)]string peerName, UInt16 authCount, [MarshalAs(UnmanagedType.LPStr)]string userName, UInt16 credMask, IntPtr credentials);
		// typedef QCC_BOOL (AJ_CALL * alljoyn_authlistener_requestcredentials_ptr)(const void* context, const char* authMechanism, const char* peerName, uint16_t authCount,
		// const char* userName, uint16_t credMask, alljoyn_credentials credentials);
		// 

		/// <summary>
		/// Authentication mechanism asynchronous request for credentials. If the user name is not an empty string
		/// the request is for credentials for that specific user. A count allows the listener to decide
		/// whether to allow or reject multiple authentication attempts to the same peer.
		/// </summary>
		/// <remarks>
		/// <para>An implementation must provide an alljoyn_authlistener_callbacks or
		/// an alljoyn_authlistenerasync_callbacks but not both.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer passed into the alljoyn_authlistenerasync_create function</param>
		/// <param name="listener">The alljoyn_authlistener used to call this function pointer this should be usedwhen calling alljoyn_authlistener_requestcredentialsresponse.</param>
		/// <param name="authMechanism">The name of the authentication mechanism issuing the request.</param>
		/// <param name="peerName">The name of the remote peer being authenticated.  On the initiatingside this will be a well-known-name for the remote peer. On the
		/// accepting side this will be the unique bus name for the remote peer.</param>
		/// <param name="authCount">Count (starting at 1) of the number of authentication request attempts made.</param>
		/// <param name="userName">The user name for the credentials being requested.</param>
		/// <param name="credMask">A bit mask identifying the credentials being requested.</param>
		/// <param name="authContext">Callback context for associating the request with the returned credentials.</param>
		/// <returns>Return- ER_OK if the request is handled.
		/// - ER_NOT_IMPLEMENTED if implementation not found (default)</returns>
		internal delegate Int32 alljoyn_authlistener_requestcredentialsasync_ptr(IntPtr context, IntPtr listener, [MarshalAs(UnmanagedType.LPStr)]string authMechanism, [MarshalAs(UnmanagedType.LPStr)]string peerName, UInt16 authCount, [MarshalAs(UnmanagedType.LPStr)]string userName, UInt16 credMask, IntPtr authContext);
		// typedef QStatus (AJ_CALL * alljoyn_authlistener_requestcredentialsasync_ptr)(const void* context, alljoyn_authlistener listener,
		// const char* authMechanism, const char* peerName, uint16_t authCount,
		// const char* userName, uint16_t credMask, void* authContext);
		// 

		/// <summary>
		/// Type for the VerifyCredentials callback.
		/// </summary>
		/// <remarks>
		/// <para>Authentication mechanism requests verification of credentials from a remote peer.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer passed into the alljoyn_authlistener_create function</param>
		/// <param name="authMechanism">The name of the authentication mechanism issuing the request.</param>
		/// <param name="peerName">The name of the remote peer being authenticated.  On the initiatingside this will be a well-known-name for the remote peer. On the
		/// accepting side this will be the unique bus name for the remote peer.</param>
		/// <param name="credentials">The credentials to be verified.</param>
		/// <returns>The listener should return true if the credentials are acceptable or false if thecredentials are being rejected.</returns>
		internal delegate Int32 alljoyn_authlistener_verifycredentials_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string authMechanism, [MarshalAs(UnmanagedType.LPStr)]string peerName, IntPtr credentials);
		// typedef QCC_BOOL (AJ_CALL * alljoyn_authlistener_verifycredentials_ptr)(const void* context, const char* authMechanism, const char* peerName,
		// const alljoyn_credentials credentials);
		// 

		/// <summary>
		/// Authentication mechanism asynchronous request for verification of credentials from a remote peer.
		/// </summary>
		/// <param name="context">The context pointer passed into the alljoyn_authlistenerasync_create function.</param>
		/// <param name="listener">The alljoyn_authlistener used to call this function pointer this should be usedwhen calling alljoyn_authlistener_verifycredentialsresponse.</param>
		/// <param name="authMechanism">The name of the authentication mechanism issuing the request.</param>
		/// <param name="peerName">The name of the remote peer being authenticated.  On the initiatingside this will be a well-known-name for the remote peer. On the
		/// accepting side this will be the unique bus name for the remote peer.</param>
		/// <param name="credentials">The credentials to be verified.</param>
		/// <param name="authContext">Callback context for associating the request with the verification response.</param>
		/// <returns>Return- ER_OK if the request is handled.
		/// - ER_NOT_IMPLEMENTED (default)</returns>
		internal delegate Int32 alljoyn_authlistener_verifycredentialsasync_ptr(IntPtr context, IntPtr listener, [MarshalAs(UnmanagedType.LPStr)]string authMechanism, [MarshalAs(UnmanagedType.LPStr)]string peerName, IntPtr credentials, IntPtr authContext);
		// typedef QStatus (AJ_CALL * alljoyn_authlistener_verifycredentialsasync_ptr)(const void* context, alljoyn_authlistener listener,
		// const char* authMechanism, const char* peerName, const alljoyn_credentials credentials, void* authContext);
		// 

		/// <summary>
		/// Type for the SecurityViolation callback.
		/// </summary>
		/// <remarks>
		/// <para>Optional function that if implemented allows an application to monitor security violations. This
		/// function is called when an attempt to decrypt an encrypted messages failed or when an unencrypted
		/// message was received on an interface that requires encryption. The message contains only
		/// header information.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer passed into the alljoyn_authlistener_create function</param>
		/// <param name="status">A status code indicating the type of security violation.</param>
		/// <param name="msg">The message that cause the security violation.</param>
		/// 
		internal delegate void alljoyn_authlistener_securityviolation_ptr(IntPtr context, Int32 status, IntPtr msg);
		// typedef void (AJ_CALL * alljoyn_authlistener_securityviolation_ptr)(const void* context, QStatus status, const alljoyn_message msg);
		// 

		/// <summary>
		/// Type for the AuthenticationComplete callback.
		/// </summary>
		/// <remarks>
		/// <para>Reports successful or unsuccessful completion of authentication.
		/// </para>
		/// </remarks>
		/// <param name="authMechanism">The name of the authentication mechanism that was used or an emptystring if the authentication failed.</param>
		/// <param name="peerName">The name of the remote peer being authenticated.  On the initiatingside this will be a well-known-name for the remote peer. On the
		/// accepting side this will be the unique bus name for the remote peer.</param>
		/// <param name="success">true if the authentication was successful, otherwise false.</param>
		/// 
		internal delegate void alljoyn_authlistener_authenticationcomplete_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string authMechanism, [MarshalAs(UnmanagedType.LPStr)]string peerName, Int32 success);
		// typedef void (AJ_CALL * alljoyn_authlistener_authenticationcomplete_ptr)(const void* context, const char* authMechanism, const char* peerName, QCC_BOOL success);
		// 

		/// <summary>
		/// Structure used during alljoyn_authlistener_create to provide callbacks into C.
		/// An implementation must provide alljoyn_authlistener_requestcredentials_ptr
		/// and alljoyn_authlistener_authenticationcomplete_ptr. Other values can be set
		/// to NULL if they are not needed.
		/// </summary>
		/// 
		[StructLayout(LayoutKind.Sequential)]
		internal partial class alljoyn_authlistener_callbacks
		{
			public alljoyn_authlistener_requestcredentials_ptr request_credentials;
			public alljoyn_authlistener_verifycredentials_ptr verify_credentials;
			public alljoyn_authlistener_securityviolation_ptr security_violation;
			public alljoyn_authlistener_authenticationcomplete_ptr authentication_complete;
			//
			///**
			//* Authentication mechanism requests user credentials.
			//*/
			//alljoyn_authlistener_requestcredentials_ptr request_credentials;
			///**
			//* Authentication mechanism requests verification of credentials from a remote peer.
			//*/
			//alljoyn_authlistener_verifycredentials_ptr verify_credentials;
			///**
			//* Optional function that if implemented allows an application to monitor security violations.
			//*/
			//alljoyn_authlistener_securityviolation_ptr security_violation;
			///**
			//* Reports successful or unsuccessful completion of authentication.
			//*/
			//alljoyn_authlistener_authenticationcomplete_ptr authentication_complete;
			//
		}
		// typedef struct {
		// /**
		// * Authentication mechanism requests user credentials.
		// */
		// alljoyn_authlistener_requestcredentials_ptr request_credentials;
		// /**
		// * Authentication mechanism requests verification of credentials from a remote peer.
		// */
		// alljoyn_authlistener_verifycredentials_ptr verify_credentials;
		// /**
		// * Optional function that if implemented allows an application to monitor security violations.
		// */
		// alljoyn_authlistener_securityviolation_ptr security_violation;
		// /**
		// * Reports successful or unsuccessful completion of authentication.
		// */
		// alljoyn_authlistener_authenticationcomplete_ptr authentication_complete;
		// } alljoyn_authlistener_callbacks;
		// 

		/// <summary>
		/// Structure used during alljoyn_authlistenerasync_create to provide callbacks into C.
		/// An implementation must provide alljoyn_authlistener_requestcredentialsasync_ptr
		/// and alljoyn_authlistener_authenticationcomplete_ptr. Other values can be set
		/// to NULL if they are not needed.
		/// </summary>
		/// 
		[StructLayout(LayoutKind.Sequential)]
		internal partial class alljoyn_authlistenerasync_callbacks
		{
			public alljoyn_authlistener_requestcredentialsasync_ptr request_credentials;
			public alljoyn_authlistener_verifycredentialsasync_ptr verify_credentials;
			public alljoyn_authlistener_securityviolation_ptr security_violation;
			public alljoyn_authlistener_authenticationcomplete_ptr authentication_complete;
			//
			///**
			//* Authentication mechanism asynchronous request for credentials.
			//*/
			//alljoyn_authlistener_requestcredentialsasync_ptr request_credentials;
			///**
			//* Authentication mechanism asynchronous request for verification of credentials from a remote peer
			//*/
			//alljoyn_authlistener_verifycredentialsasync_ptr verify_credentials;
			///**
			//* Optional function that if implemented allows an application to monitor security violations.
			//*/
			//alljoyn_authlistener_securityviolation_ptr security_violation;
			///**
			//* Reports successful or unsuccessful completion of authentication.
			//*/
			//alljoyn_authlistener_authenticationcomplete_ptr authentication_complete;
			//
			//
		}
		// typedef struct {
		// /**
		// * Authentication mechanism asynchronous request for credentials.
		// */
		// alljoyn_authlistener_requestcredentialsasync_ptr request_credentials;
		// /**
		// * Authentication mechanism asynchronous request for verification of credentials from a remote peer
		// */
		// alljoyn_authlistener_verifycredentialsasync_ptr verify_credentials;
		// /**
		// * Optional function that if implemented allows an application to monitor security violations.
		// */
		// alljoyn_authlistener_securityviolation_ptr security_violation;
		// /**
		// * Reports successful or unsuccessful completion of authentication.
		// */
		// alljoyn_authlistener_authenticationcomplete_ptr authentication_complete;
		// 
		// } alljoyn_authlistenerasync_callbacks;
		// 

//
    public partial class AuthListener : AllJoynWrapper
    {
        internal AuthListener(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Respond to a call to alljoyn_authlistener_requestcredentialsasync_ptr.
		/// </summary>
		/// <param name="listener">The alljoyn_authlistener responding to the authlistener_requestcredentialsasync</param>
		/// <param name="authContext">Context that was passed in the call out to alljoyn_authlistener_requestcredentialsasync_ptr.</param>
		/// <param name="accept">Returns true to accept the credentials request or false to reject it.</param>
		/// <param name="credentials">The credentials being returned if accept is true.</param>
		/// <returns>Returns ER_OK if the credential verification response was expected. Returns an error status ifthe credentials verification response was not expected.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_authlistener_requestcredentialsresponse(IntPtr listener, IntPtr authContext, Int32 accept, IntPtr credentials);
		// extern AJ_API QStatus AJ_CALL alljoyn_authlistener_requestcredentialsresponse(alljoyn_authlistener listener, void* authContext, QCC_BOOL accept, alljoyn_credentials credentials);

		/// <summary>
		/// Respond to a call to alljoyn_authlistener_verifycredentialsasync_ptr.
		/// </summary>
		/// <param name="listener">The alljoyn_authlistener responding to the authlistener_verifycredentialsasync.</param>
		/// <param name="authContext">Context that was passed in the call out to alljoyn_authlistener_verifycredentialsasync_ptr.</param>
		/// <param name="accept">Returns true to accept the credentials or false to reject it.</param>
		/// <returns>Returns ER_OK if the credential verification response was expected. Returns an error status ifthe credentials verification response was not expected.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_authlistener_verifycredentialsresponse(IntPtr listener, IntPtr authContext, Int32 accept);
		// extern AJ_API QStatus AJ_CALL alljoyn_authlistener_verifycredentialsresponse(alljoyn_authlistener listener, void* authContext, QCC_BOOL accept);

		/// <summary>
		/// Create an alljoyn_authlistener which will trigger the provided callbacks, passing along the provided context.
		/// </summary>
		/// <param name="callbacks">Callbacks to trigger for associated events.</param>
		/// <param name="context">Context to pass to callback functions</param>
		/// <returns>Handle to newly allocated alljoyn_authlistener.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_authlistener_create(alljoyn_authlistener_callbacks callbacks, IntPtr context);
		// extern AJ_API alljoyn_authlistener AJ_CALL alljoyn_authlistener_create(const alljoyn_authlistener_callbacks* callbacks, const void* context);

		/// <summary>
		/// Create an alljoyn_authlistener which will trigger the provided callbacks, passing along the provided context.
		/// </summary>
		/// <param name="callbacks">Callbacks to trigger for associated events.</param>
		/// <param name="context">Context to pass to callback functions</param>
		/// <returns>Handle to newly allocated alljoyn_authlistener.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_authlistenerasync_create(alljoyn_authlistenerasync_callbacks callbacks, IntPtr context);
		// extern AJ_API alljoyn_authlistener AJ_CALL alljoyn_authlistenerasync_create(const alljoyn_authlistenerasync_callbacks* callbacks, const void* context);

		/// <summary>
		/// Destroy an alljoyn_authlistener.
		/// </summary>
		/// <param name="listener">alljoyn_authlistener to destroy.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_authlistener_destroy(IntPtr listener);
		// extern AJ_API void AJ_CALL alljoyn_authlistener_destroy(alljoyn_authlistener listener);

		/// <summary>
		/// Destroy an alljoyn_authlistener.
		/// </summary>
		/// <param name="listener">alljoyn_authlistener to destroy.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_authlistenerasync_destroy(IntPtr listener);
		// extern AJ_API void AJ_CALL alljoyn_authlistenerasync_destroy(alljoyn_authlistener listener);

		/// <summary>
		/// Create credentials
		/// </summary>
		/// <returns>Newly created credentials.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_create();
		// extern AJ_API alljoyn_credentials AJ_CALL alljoyn_credentials_create();

		/// <summary>
		/// Destroy credentials
		/// </summary>
		/// <param name="cred">Credentials to destroy.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_destroy(IntPtr cred);
		// extern AJ_API void AJ_CALL alljoyn_credentials_destroy(alljoyn_credentials cred);

		/// <summary>
		/// Tests if one or more credentials are set.
		/// </summary>
		/// <param name="cred">The credentials to test.</param>
		/// <param name="creds">A logical or of the credential bit values.</param>
		/// <returns>true if the credentials are set.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_credentials_isset(IntPtr cred, UInt16 creds);
		// extern AJ_API QCC_BOOL AJ_CALL alljoyn_credentials_isset(const alljoyn_credentials cred, uint16_t creds);

		/// <summary>
		/// Sets a requested password, pincode, or passphrase.
		/// </summary>
		/// <param name="cred">The credentials to set.</param>
		/// <param name="pwd">The password to set.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_setpassword(IntPtr cred, [MarshalAs(UnmanagedType.LPStr)]string pwd);
		// extern AJ_API void AJ_CALL alljoyn_credentials_setpassword(alljoyn_credentials cred, const char* pwd);

		/// <summary>
		/// Sets a requested user name.
		/// </summary>
		/// <param name="cred">The credentials to set.</param>
		/// <param name="userName">The user name to set.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_setusername(IntPtr cred, [MarshalAs(UnmanagedType.LPStr)]string userName);
		// extern AJ_API void AJ_CALL alljoyn_credentials_setusername(alljoyn_credentials cred, const char* userName);

		/// <summary>
		/// Sets a requested public key certificate chain. The certificates must be PEM encoded.
		/// </summary>
		/// <param name="cred">The credentials to set.</param>
		/// <param name="certChain">The certificate chain to set.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_setcertchain(IntPtr cred, [MarshalAs(UnmanagedType.LPStr)]string certChain);
		// extern AJ_API void AJ_CALL alljoyn_credentials_setcertchain(alljoyn_credentials cred, const char* certChain);

		/// <summary>
		/// Sets a requested private key. The private key must be PEM encoded and may be encrypted. If
		/// the private key is encrypted the passphrase required to decrypt it must also be supplied.
		/// </summary>
		/// <param name="cred">The credentials to set.</param>
		/// <param name="pk">The private key to set.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_setprivatekey(IntPtr cred, [MarshalAs(UnmanagedType.LPStr)]string pk);
		// extern AJ_API void AJ_CALL alljoyn_credentials_setprivatekey(alljoyn_credentials cred, const char* pk);

		/// <summary>
		/// Sets a logon entry. For example for the Secure Remote Password protocol in RFC 5054, a
		/// logon entry encodes the N,g, s and v parameters. An SRP logon entry string has the form
		/// N:g:s:v where N,g,s, and v are ASCII encoded hexadecimal strings and are separated by
		/// colons.
		/// </summary>
		/// <param name="cred">The credentials to set.</param>
		/// <param name="logonEntry">The logon entry to set.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_setlogonentry(IntPtr cred, [MarshalAs(UnmanagedType.LPStr)]string logonEntry);
		// extern AJ_API void AJ_CALL alljoyn_credentials_setlogonentry(alljoyn_credentials cred, const char* logonEntry);

		/// <summary>
		/// Sets an expiration time in seconds relative to the current time for the credentials. This value is optional and
		/// can be set on any response to a credentials request. After the specified expiration time has elapsed any secret
		/// keys based on the provided credentials are invalidated and a new authentication exchange will be required. If an
		/// expiration is not set the default expiration time for the requested authentication mechanism is used.
		/// </summary>
		/// <param name="cred">The credentials to set.</param>
		/// <param name="expiration">The expiration time in seconds.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_setexpiration(IntPtr cred, UInt32 expiration);
		// extern AJ_API void AJ_CALL alljoyn_credentials_setexpiration(alljoyn_credentials cred, uint32_t expiration);

		/// <summary>
		/// Gets the password, pincode, or passphrase from this credentials instance.
		/// </summary>
		/// <param name="cred">The credentials to query.</param>
		/// <returns>A password or an empty string.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_getpassword(IntPtr cred);
		// extern AJ_API const char* AJ_CALL alljoyn_credentials_getpassword(const alljoyn_credentials cred);

		/// <summary>
		/// Gets the user name from this credentials instance.
		/// </summary>
		/// <param name="cred">The credentials to query.</param>
		/// <returns>A user name or an empty string.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_getusername(IntPtr cred);
		// extern AJ_API const char* AJ_CALL alljoyn_credentials_getusername(const alljoyn_credentials cred);

		/// <summary>
		/// Gets the PEM encoded X509 certificate chain from this credentials instance.
		/// </summary>
		/// <param name="cred">The credentials to query.</param>
		/// <returns>An X509 certificate chain or an empty string.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_getcertchain(IntPtr cred);
		// extern AJ_API const char* AJ_CALL alljoyn_credentials_getcertchain(const alljoyn_credentials cred);

		/// <summary>
		/// Gets the PEM encoded private key from this credentials instance.
		/// </summary>
		/// <param name="cred">The credentials to query.</param>
		/// <returns>An PEM encode private key or an empty string.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_getprivateKey(IntPtr cred);
		// extern AJ_API const char* AJ_CALL alljoyn_credentials_getprivateKey(const alljoyn_credentials cred);

		/// <summary>
		/// Gets a logon entry.
		/// </summary>
		/// <param name="cred">The credentials to query.</param>
		/// <returns>An encoded logon entry or an empty string.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_getlogonentry(IntPtr cred);
		// extern AJ_API const char* AJ_CALL alljoyn_credentials_getlogonentry(const alljoyn_credentials cred);

		/// <summary>
		/// Get the expiration time in seconds if it is set.
		/// </summary>
		/// <param name="cred">The credentials to query.</param>
		/// <returns>The expiration or the max 32 bit unsigned value if it was not set.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt32 alljoyn_credentials_getexpiration(IntPtr cred);
		// extern AJ_API uint32_t AJ_CALL alljoyn_credentials_getexpiration(const alljoyn_credentials cred);

		/// <summary>
		/// Clear the credentials.
		/// </summary>
		/// <param name="cred">The credentials to clear.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_credentials_clear(IntPtr cred);
		// extern AJ_API void AJ_CALL alljoyn_credentials_clear(alljoyn_credentials cred);


    }
}