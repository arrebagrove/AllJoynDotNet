// Generated from AutoPinger.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Destination Lost: called when the destination becomes unreachable.
		/// Called once.
		/// </summary>
		/// <param name="context">The context pointer that was passed into thealljoyn_pinglistener_create function.</param>
		/// <param name="group">The pinging group name.</param>
		/// <param name="destination">The unique name of the destination that was pinged.</param>
		/// 
		internal delegate void alljoyn_autopinger_destination_lost_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string group, [MarshalAs(UnmanagedType.LPStr)]string destination);
		// typedef void (AJ_CALL * alljoyn_autopinger_destination_lost_ptr)(const void* context,
		// const char* group,
		// const char* destination);
		// 

		/// <summary>
		/// Destination Found: called when the destination becomes reachable.
		/// Called once.
		/// </summary>
		/// <param name="context">The context pointer that was passed into thealljoyn_pinglistener_create function.</param>
		/// <param name="group">The pinging group name.</param>
		/// <param name="destination">The unique name of the destination that was pinged.</param>
		/// 
		internal delegate void alljoyn_autopinger_destination_found_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string group, [MarshalAs(UnmanagedType.LPStr)]string destination);
		// typedef void (AJ_CALL * alljoyn_autopinger_destination_found_ptr)(const void* context,
		// const char* group,
		// const char* destination);
		// 

		/// <summary>
		/// The callbacks used for the creation of an alljoyn_pinglistener.
		/// </summary>
		/// 
		[StructLayout(LayoutKind.Sequential)]
		internal partial class alljoyn_pinglistener_callback
		{
			public alljoyn_autopinger_destination_found_ptr destination_found;
			public alljoyn_autopinger_destination_lost_ptr destination_lost;
			//
			///**
			//* A new destination was found.
			//*/
			//alljoyn_autopinger_destination_found_ptr destination_found;
			///**
			//* A previously known destination was lost.
			//*/
			//alljoyn_autopinger_destination_lost_ptr destination_lost;
			//
		}
		// typedef struct {
		// /**
		// * A new destination was found.
		// */
		// alljoyn_autopinger_destination_found_ptr destination_found;
		// /**
		// * A previously known destination was lost.
		// */
		// alljoyn_autopinger_destination_lost_ptr destination_lost;
		// } alljoyn_pinglistener_callback;
		// 

//
    public partial class AutoPinger : AllJoynWrapper
    {
        internal AutoPinger(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Allocate a new alljoyn_pinglistener.
		/// </summary>
		/// <param name="callback">The callbacks used by the created listener to notifyabout the (dis)appearance of destinations.
		/// The pinglistener returned by this function is owned by the caller and should
		/// be deleted using alljoyn_pinglistener_destroy once the ping group(s) that it was
		/// used with is/are removed.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_pinglistener_create(alljoyn_pinglistener_callback callback, IntPtr context);
		// extern AJ_API alljoyn_pinglistener AJ_CALL alljoyn_pinglistener_create(const alljoyn_pinglistener_callback* callback,const void* context);

		/// <summary>
		/// Free an alljoyn_pinglistener.
		/// </summary>
		/// <param name="listener">The pinglistener that was previously created byalljoyn_pinglistener_create that needs to be deleted.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_pinglistener_destroy(IntPtr listener);
		// extern AJ_API void AJ_CALL alljoyn_pinglistener_destroy(alljoyn_pinglistener listener);

		/// <summary>
		/// Create an instance of autopinger
		/// </summary>
		/// <param name="busAttachment">Reference to the bus attachment associated with thisautopinger.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_autopinger_create(IntPtr bus);
		// extern AJ_API alljoyn_autopinger AJ_CALL alljoyn_autopinger_create(alljoyn_busattachment bus);

		/// <summary>
		/// Destructor.
		/// </summary>
		/// <param name="autopinger">Reference to the autopinger to be destroyed.Do not destroy an autopinger instance from within a pinglistener
		/// callback. This will cause a deadlock.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_autopinger_destroy(IntPtr autopinger);
		// extern AJ_API void AJ_CALL alljoyn_autopinger_destroy(alljoyn_autopinger autopinger);

		/// <summary>
		/// Pause all ping actions.
		/// </summary>
		/// <param name="autopinger">Reference to the autopinger.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_autopinger_pause(IntPtr autopinger);
		// extern AJ_API void AJ_CALL alljoyn_autopinger_pause(alljoyn_autopinger autopinger);

		/// <summary>
		/// Resume ping actions.
		/// </summary>
		/// <param name="autopinger">Reference to the autopinger.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_autopinger_resume(IntPtr autopinger);
		// extern AJ_API void AJ_CALL alljoyn_autopinger_resume(alljoyn_autopinger autopinger);

		/// <summary>
		/// Define new ping group.
		/// </summary>
		/// <param name="autopinger">Reference to the autopinger.</param>
		/// <param name="group">Ping group name.</param>
		/// <param name="listener">Listener called when a change was detected in the reachability of adestination.</param>
		/// <param name="pingInterval">Ping interval in seconds.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_autopinger_addpinggroup(IntPtr autopinger, [MarshalAs(UnmanagedType.LPStr)]string group, IntPtr listener, UInt32 pinginterval = 5);
		// extern AJ_API void AJ_CALL alljoyn_autopinger_addpinggroup(alljoyn_autopinger autopinger,const char* group,alljoyn_pinglistener listener,uint32_t pinginterval = 5);

		/// <summary>
		/// Remove complete ping group, including all destinations.
		/// </summary>
		/// <remarks>
		/// <para>Do not invoke this method from within a pinglistener callback. This will
		/// cause a deadlock.
		/// </para>
		/// </remarks>
		/// <param name="autopinger">Reference to the autopinger.</param>
		/// <param name="group">Ping group name.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_autopinger_removepinggroup(IntPtr autopinger, [MarshalAs(UnmanagedType.LPStr)]string group);
		// extern AJ_API void AJ_CALL alljoyn_autopinger_removepinggroup(alljoyn_autopinger autopinger,const char* group);

		/// <summary>
		/// Set ping interval of the specified group.
		/// </summary>
		/// <param name="autopinger">Reference to the autopinger.</param>
		/// <param name="group">Ping group name.</param>
		/// <param name="pingInterval">Ping interval in seconds.</param>
		/// <returns>- #ER_OK: interval updated.
		/// - #ER_BUS_PING_GROUP_NOT_FOUND: group did not exist.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_autopinger_setpinginterval(IntPtr autopinger, [MarshalAs(UnmanagedType.LPStr)]string group, UInt32 pinginterval);
		// extern AJ_API QStatus AJ_CALL alljoyn_autopinger_setpinginterval(alljoyn_autopinger autopinger,const char* group,uint32_t pinginterval);

		/// <summary>
		/// Add a destination to the specified ping group.
		/// Destinations are refcounted and must be removed N times if they were added N times.
		/// </summary>
		/// <param name="autopinger">Reference to the autopinger.</param>
		/// <param name="group">Ping group name.</param>
		/// <param name="destination">Unique name of the destination to be pinged.</param>
		/// <returns>- #ER_OK: destination added.
		/// - #ER_BUS_PING_GROUP_NOT_FOUND: group did not exist.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_autopinger_adddestination(IntPtr autopinger, [MarshalAs(UnmanagedType.LPStr)]string group, [MarshalAs(UnmanagedType.LPStr)]string destination);
		// extern AJ_API QStatus AJ_CALL alljoyn_autopinger_adddestination(alljoyn_autopinger autopinger,const char* group,const char* destination);

		/// <summary>
		/// Remove a destination from the specified ping group.
		/// This will lower the refcount by one and only remove the destination when the refcount reaches
		/// zero.
		/// </summary>
		/// <param name="autopinger">Reference to the autopinger.</param>
		/// <param name="group">Ping group name.</param>
		/// <param name="destination">Unique name of the destination to be removed.</param>
		/// <param name="removeAll">Rather than decrementing the refcount by one, set refcount to zero andremove.</param>
		/// <returns>- #ER_OK: destination removed or was not present.
		/// - #ER_BUS_PING_GROUP_NOT_FOUND: group did not exist.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_autopinger_removedestination(IntPtr autopinger, [MarshalAs(UnmanagedType.LPStr)]string group, [MarshalAs(UnmanagedType.LPStr)]string destination, Int32 removeall = 0);
		// extern AJ_API QStatus AJ_CALL alljoyn_autopinger_removedestination(alljoyn_autopinger autopinger,const char* group,const char* destination,QCC_BOOL removeall = false);


    }
}