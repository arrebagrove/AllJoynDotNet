// Generated from BusListener.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Type for the ListenerRegistered callback.
		/// </summary>
		/// <remarks>
		/// <para>Called by the bus when the listener is registered. This gives the listener implementation the
		/// opportunity to save a reference to the bus.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer that was passed into the alljoyn_buslistener_create function</param>
		/// <param name="bus">The alljoyn_busattachment the listener is registered with.</param>
		/// 
		internal delegate void alljoyn_buslistener_listener_registered_ptr(IntPtr context, IntPtr bus);
		// typedef void (AJ_CALL * alljoyn_buslistener_listener_registered_ptr)(const void* context, alljoyn_busattachment bus);
		// 

		/// <summary>
		/// Type for the ListenerUnregistered callback.
		/// </summary>
		/// <remarks>
		/// <para>Called by the bus when the listener is unregistered.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer that was passed into the alljoyn_buslistener_create function</param>
		/// 
		internal delegate void alljoyn_buslistener_listener_unregistered_ptr(IntPtr context);
		// typedef void (AJ_CALL * alljoyn_buslistener_listener_unregistered_ptr)(const void* context);
		// 

		/// <summary>
		/// Type for the FoundAdvertisedName callback.
		/// </summary>
		/// <remarks>
		/// <para>Called by the bus when an external bus is discovered that is advertising a well-known name
		/// that this attachment has registered interest in via a DBus call to org.alljoyn.Bus.FindAdvertisedName
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer that was passed into the alljoyn_buslistener_create function</param>
		/// <param name="name">A well known name that the remote bus is advertising.</param>
		/// <param name="transport">Transport that received the advertisement.</param>
		/// <param name="namePrefix">The well-known name prefix used in call to FindAdvertisedName that triggered this callback.</param>
		/// 
		internal delegate void alljoyn_buslistener_found_advertised_name_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string name, UInt16 transport, [MarshalAs(UnmanagedType.LPStr)]string namePrefix);
		// typedef void (AJ_CALL * alljoyn_buslistener_found_advertised_name_ptr)(const void* context, const char* name, alljoyn_transportmask transport, const char* namePrefix);
		// 

		/// <summary>
		/// This callback is deprecated, it will not be called any more.  Use the property change notification mechanism for proxy bus objects.
		/// Type for the LostAdvertisedName callback.
		/// </summary>
		/// <remarks>
		/// <para>Called by the bus when an advertisement previously reported through FoundName has become unavailable.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer that was passed into the alljoyn_buslistener_create function</param>
		/// <param name="name">A well known name that the remote bus is advertising that is of interest to this attachment.</param>
		/// <param name="transport">Transport that stopped receiving the given advertised name.</param>
		/// <param name="namePrefix">The well-known name prefix that was used in a call to FindAdvertisedName that triggered this callback.</param>
		/// 
		internal delegate void alljoyn_buslistener_lost_advertised_name_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string name, UInt16 transport, [MarshalAs(UnmanagedType.LPStr)]string namePrefix);
		// typedef void (AJ_CALL * alljoyn_buslistener_lost_advertised_name_ptr)(const void* context, const char* name, alljoyn_transportmask transport, const char* namePrefix);
		// 

		/// <summary>
		/// Type for the NameOwnerChanged callback.
		/// </summary>
		/// <remarks>
		/// <para>Called by the bus when the ownership of any well-known name changes.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer that was passed into the alljoyn_buslistener_create function</param>
		/// <param name="busName">The well-known name that has changed.</param>
		/// <param name="previousOwner">The unique name that previously owned the name or NULL if there was no previous owner.</param>
		/// <param name="newOwner">The unique name that now owns the name or NULL if there is no new owner.</param>
		/// 
		internal delegate void alljoyn_buslistener_name_owner_changed_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string busName, [MarshalAs(UnmanagedType.LPStr)]string previousOwner, [MarshalAs(UnmanagedType.LPStr)]string newOwner);
		// typedef void (AJ_CALL * alljoyn_buslistener_name_owner_changed_ptr)(const void* context, const char* busName, const char* previousOwner, const char* newOwner);
		// 

		/// <summary>
		/// Type for the BusStopping callback.
		/// </summary>
		/// <param name="context">The context pointer that was passed into the alljoyn_buslistener_create function</param>
		/// 
		internal delegate void alljoyn_buslistener_bus_stopping_ptr(IntPtr context);
		// typedef void (AJ_CALL * alljoyn_buslistener_bus_stopping_ptr)(const void* context);
		// 

		/// <summary>
		/// Type for the BusDisconnected callback.
		/// </summary>
		/// <param name="context">The context pointer that was passed into the alljoyn_buslistener_create function</param>
		/// 
		internal delegate void alljoyn_buslistener_bus_disconnected_ptr(IntPtr context);
		// typedef void (AJ_CALL * alljoyn_buslistener_bus_disconnected_ptr)(const void* context);
		// 

		/// <summary>
		/// Type for the PropertyChanged callback.
		/// </summary>
		/// <remarks>
		/// <para>Called by the bus when the value of a property changes if that property has annotation
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer that was passed into the alljoyn_buslistener_create function</param>
		/// <param name="propName">The well-known name that has changed.</param>
		/// <param name="propValue">The new value of the property; NULL if not present</param>
		/// 
		internal delegate void alljoyn_buslistener_bus_prop_changed_ptr(IntPtr context, [MarshalAs(UnmanagedType.LPStr)]string prop_name, IntPtr prop_value);
		// typedef void (AJ_CALL * alljoyn_buslistener_bus_prop_changed_ptr)(const void* context, const char* prop_name, alljoyn_msgarg prop_value);
		// 

		/// <summary>
		/// Struct containing callbacks used for creation of an alljoyn_buslistener.
		/// </summary>
		/// 
		[StructLayout(LayoutKind.Sequential)]
		internal partial class alljoyn_buslistener_callbacks
		{
			public alljoyn_buslistener_listener_registered_ptr listener_registered;
			public alljoyn_buslistener_listener_unregistered_ptr listener_unregistered;
			public alljoyn_buslistener_found_advertised_name_ptr found_advertised_name;
			public alljoyn_buslistener_lost_advertised_name_ptr lost_advertised_name;
			public alljoyn_buslistener_name_owner_changed_ptr name_owner_changed;
			public alljoyn_buslistener_bus_stopping_ptr bus_stopping;
			public alljoyn_buslistener_bus_disconnected_ptr bus_disconnected;
			public alljoyn_buslistener_bus_prop_changed_ptr property_changed;
			//
			///**
			//* Function pointer called by the bus when the listener is registered
			//*/
			//alljoyn_buslistener_listener_registered_ptr listener_registered;
			///**
			//* Function pointer called by the bus when the listener is unregistered
			//*/
			//alljoyn_buslistener_listener_unregistered_ptr listener_unregistered;
			///**
			//* Function pointer called by the bus when an external bus is discovered that is advertising
			//* a well-known name that this alljoyn_busattachment has registered interest
			//* in via a DBus call to org.alljoyn.Bus.FindAdvertisedName
			//*/
			//alljoyn_buslistener_found_advertised_name_ptr found_advertised_name;
			///**
			//* Function pointer called by the bus when an advertisement previously reported through FoundName has become unavailable.
			//*/
			//alljoyn_buslistener_lost_advertised_name_ptr lost_advertised_name;
			///**
			//* Function pointer called by the bus when the ownership of any well-known name changes.
			//*/
			//alljoyn_buslistener_name_owner_changed_ptr name_owner_changed;
			///**
			//* Function pointer called when an alljoyn_busattachment this listener is registered with is stopping.
			//*/
			//alljoyn_buslistener_bus_stopping_ptr bus_stopping;
			///**
			//* Function pointer called when an alljoyn_busattachment this listener is registered with has become disconnected from
			//* the bus.
			//*/
			//alljoyn_buslistener_bus_disconnected_ptr bus_disconnected;
			///**
			//* Function pointer called by the bus when the value of a property changes if that property has annotation
			//*/
			//alljoyn_buslistener_bus_prop_changed_ptr property_changed;
			//
		}
		// typedef struct {
		// /**
		// * Function pointer called by the bus when the listener is registered
		// */
		// alljoyn_buslistener_listener_registered_ptr listener_registered;
		// /**
		// * Function pointer called by the bus when the listener is unregistered
		// */
		// alljoyn_buslistener_listener_unregistered_ptr listener_unregistered;
		// /**
		// * Function pointer called by the bus when an external bus is discovered that is advertising
		// * a well-known name that this alljoyn_busattachment has registered interest
		// * in via a DBus call to org.alljoyn.Bus.FindAdvertisedName
		// */
		// alljoyn_buslistener_found_advertised_name_ptr found_advertised_name;
		// /**
		// * Function pointer called by the bus when an advertisement previously reported through FoundName has become unavailable.
		// */
		// alljoyn_buslistener_lost_advertised_name_ptr lost_advertised_name;
		// /**
		// * Function pointer called by the bus when the ownership of any well-known name changes.
		// */
		// alljoyn_buslistener_name_owner_changed_ptr name_owner_changed;
		// /**
		// * Function pointer called when an alljoyn_busattachment this listener is registered with is stopping.
		// */
		// alljoyn_buslistener_bus_stopping_ptr bus_stopping;
		// /**
		// * Function pointer called when an alljoyn_busattachment this listener is registered with has become disconnected from
		// * the bus.
		// */
		// alljoyn_buslistener_bus_disconnected_ptr bus_disconnected;
		// /**
		// * Function pointer called by the bus when the value of a property changes if that property has annotation
		// */
		// alljoyn_buslistener_bus_prop_changed_ptr property_changed;
		// } alljoyn_buslistener_callbacks;
		// 

//
    public partial class BusListener : AllJoynWrapper
    {
        internal BusListener(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Create an alljoyn_buslistener which will trigger the provided callbacks, passing along the provided context.
		/// </summary>
		/// <param name="callbacks">Callbacks to trigger for associated events.</param>
		/// <param name="context">Context to pass to callback functions</param>
		/// <returns>Handle to newly allocated alljoyn_buslistener.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_buslistener_create(alljoyn_buslistener_callbacks callbacks, IntPtr context);
		// extern AJ_API alljoyn_buslistener AJ_CALL alljoyn_buslistener_create(const alljoyn_buslistener_callbacks* callbacks, const void* context);

		/// <summary>
		/// Destroy an alljoyn_buslistener.
		/// </summary>
		/// <param name="listener">alljoyn_buslistener to destroy.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_buslistener_destroy(IntPtr listener);
		// extern AJ_API void AJ_CALL alljoyn_buslistener_destroy(alljoyn_buslistener listener);


    }
}