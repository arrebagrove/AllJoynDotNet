// Generated from KeyStoreListener.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Type for the LoadRequest callback.
		/// </summary>
		/// <remarks>
		/// <para>This function is called when a key store needs to be loaded.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer passed into the alljoyn_keystorelistener_create function</param>
		/// <param name="listener">The listener that is responsible for the LoadRequest callback.This listener should be used when calling the @c alljoyn_keystorelistener_putkeys
		/// function.</param>
		/// <param name="keyStore">Reference to the alljoyn_keystore to be loaded.</param>
		/// <returns>- #ER_OK if the load request was satisfied
		/// - An error status otherwise</returns>
		internal delegate Int32 alljoyn_keystorelistener_loadrequest_ptr(IntPtr context, IntPtr listener, IntPtr keyStore);
		// typedef QStatus (AJ_CALL * alljoyn_keystorelistener_loadrequest_ptr)(const void* context, alljoyn_keystorelistener listener, alljoyn_keystore keyStore);
		// 

		/// <summary>
		/// Type for the StoreRequest callback.
		/// </summary>
		/// <remarks>
		/// <para>This function is called when a key store needs to be stored.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer passed into the alljoyn_keystorelistener_create function</param>
		/// <param name="listener">The listener that responsible for the StoreRequest callback.This listener should be used when calling the @c alljoyn_keystorelistener_getkeys
		/// function.</param>
		/// <param name="keyStore">Reference to the @c alljoyn_keystore to be stored.</param>
		/// <returns>- #ER_OK if the store request was satisfied
		/// - An error status otherwise</returns>
		internal delegate Int32 alljoyn_keystorelistener_storerequest_ptr(IntPtr context, IntPtr listener, IntPtr keyStore);
		// typedef QStatus (AJ_CALL * alljoyn_keystorelistener_storerequest_ptr)(const void* context, alljoyn_keystorelistener listener, alljoyn_keystore keyStore);
		// 

		/// <summary>
		/// Structure used during alljoyn_keystorelistener_create to provide callbacks into C.
		/// An implementation must provide both
		/// alljoyn_keystorelistener_loadrequest_ptr
		/// alljoyn_keystorelistener_storerequest_ptr
		/// </summary>
		/// 
		[StructLayout(LayoutKind.Sequential)]
		internal partial class alljoyn_keystorelistener_callbacks
		{
			public alljoyn_keystorelistener_loadrequest_ptr load_request;
			public alljoyn_keystorelistener_storerequest_ptr store_request;
			//
			///**
			//* This function is called when a key store needs to be loaded.
			//*/
			//alljoyn_keystorelistener_loadrequest_ptr load_request;
			///**
			//* This function is called when a key store needs to be stored.
			//*/
			//alljoyn_keystorelistener_storerequest_ptr store_request;
			//
		}
		// typedef struct {
		// /**
		// * This function is called when a key store needs to be loaded.
		// */
		// alljoyn_keystorelistener_loadrequest_ptr load_request;
		// /**
		// * This function is called when a key store needs to be stored.
		// */
		// alljoyn_keystorelistener_storerequest_ptr store_request;
		// } alljoyn_keystorelistener_callbacks;
		// 

//
    public partial class KeyStoreListener : AllJoynWrapper
    {
        internal KeyStoreListener(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Create an alljoyn_keystorelistener
		/// </summary>
		/// <param name="callbacks">Callbacks to trigger for associated events.</param>
		/// <param name="context">Context to pass along to callback functions.</param>
		/// <returns>an allocated alljoyn_keystorelistener</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_keystorelistener_create(alljoyn_keystorelistener_callbacks callbacks, IntPtr context);
		// extern AJ_API alljoyn_keystorelistener AJ_CALL alljoyn_keystorelistener_create(const alljoyn_keystorelistener_callbacks* callbacks,const void* context);

		/// <summary>
		/// Destroy an alljoyn_keystorelistener
		/// </summary>
		/// <param name="listener">The alljoyn_keystorelistener to destroy.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_keystorelistener_destroy(IntPtr listener);
		// extern AJ_API void AJ_CALL alljoyn_keystorelistener_destroy(alljoyn_keystorelistener listener);

		/// <summary>
		/// Put keys into the key store from an encrypted byte string.
		/// </summary>
		/// <param name="listener">The alljoyn_keystorelistener into which to put the keys.</param>
		/// <param name="keyStore">The keyStore to put to. This is the keystore indicated in the LoadRequest call.</param>
		/// <param name="source">The byte string containing the encrypted key store contents.</param>
		/// <param name="password">The password required to decrypt the key data</param>
		/// <returns>- #ER_OK if successful
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_keystorelistener_putkeys(IntPtr listener, IntPtr keyStore, [MarshalAs(UnmanagedType.LPStr)]string source, [MarshalAs(UnmanagedType.LPStr)]string password);
		// extern AJ_API QStatus AJ_CALL alljoyn_keystorelistener_putkeys(alljoyn_keystorelistener listener, alljoyn_keystore keyStore,const char* source, const char* password);

		/// <summary>
		/// Get the current keys from the key store as an encrypted byte string.
		/// </summary>
		/// <param name="listener">The alljoyn_keystorelistener from which to get the keys.</param>
		/// <param name="keyStore">The keyStore to get from. This is the keystore indicated inthe StoreRequest call.</param>
		/// <param name="sink">The byte string to write the keys to. If sink is NULL then thesink_sz parameter will return the size of the sink plus the
		/// terminating nul character.</param>
		/// <param name="sink_sz">The size of the byte string provided. This will returnthe actual size of the sink plus the terminating nul
		/// character. If the sink_sz out should be larger than or
		/// equal to the sink_sz in.</param><!-- in, out -->
		/// <returns>- #ER_OK if successful
		/// - #ER_BUFFER_TOO_SMALL if the specified sink_sz is is not large enough
		/// to hold the sink
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_keystorelistener_getkeys(IntPtr listener, IntPtr keyStore, [MarshalAs(UnmanagedType.LPStr)]string sink, [In, Out]UInt64 sink_sz);
		// extern AJ_API QStatus AJ_CALL alljoyn_keystorelistener_getkeys(alljoyn_keystorelistener listener, alljoyn_keystore keyStore,char* sink, size_t* sink_sz);


    }
}