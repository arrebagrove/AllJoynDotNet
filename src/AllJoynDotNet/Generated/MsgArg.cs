// Generated from MsgArg.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Enumeration of the various message arg types.
		/// </summary>
		/// 
		internal enum alljoyn_typeid
		{
		
		ALLJOYN_INVALID          =  0,     ///< AllJoyn INVALID typeId
		ALLJOYN_ARRAY            = 'a',    ///< AllJoyn array container type
		ALLJOYN_BOOLEAN          = 'b',    ///< AllJoyn boolean basic type, @c 0 is @c FALSE and @c 1 is @c TRUE - Everything else is invalid
		ALLJOYN_DOUBLE           = 'd',    ///< AllJoyn IEEE 754 double basic type
		ALLJOYN_DICT_ENTRY       = 'e',    ///< AllJoyn dictionary or map container type - an array of key-value pairs
		ALLJOYN_SIGNATURE        = 'g',    ///< AllJoyn signature basic type
		ALLJOYN_HANDLE           = 'h',    ///< AllJoyn socket handle basic type
		ALLJOYN_INT32            = 'i',    ///< AllJoyn 32-bit signed integer basic type
		ALLJOYN_INT16            = 'n',    ///< AllJoyn 16-bit signed integer basic type
		ALLJOYN_OBJECT_PATH      = 'o',    ///< AllJoyn Name of an AllJoyn object instance basic type
		ALLJOYN_UINT16           = 'q',    ///< AllJoyn 16-bit unsigned integer basic type
		ALLJOYN_STRUCT           = 'r',    ///< AllJoyn struct container type
		ALLJOYN_STRING           = 's',    ///< AllJoyn UTF-8 NULL terminated string basic type
		ALLJOYN_UINT64           = 't',    ///< AllJoyn 64-bit unsigned integer basic type
		ALLJOYN_UINT32           = 'u',    ///< AllJoyn 32-bit unsigned integer basic type
		ALLJOYN_VARIANT          = 'v',    ///< AllJoyn variant container type
		ALLJOYN_INT64            = 'x',    ///< AllJoyn 64-bit signed integer basic type
		ALLJOYN_BYTE             = 'y',    ///< AllJoyn 8-bit unsigned integer basic type
		
		ALLJOYN_STRUCT_OPEN      = '(', /**< Never actually used as a typeId: specified as ALLJOYN_STRUCT */
		ALLJOYN_STRUCT_CLOSE     = ')', /**< Never actually used as a typeId: specified as ALLJOYN_STRUCT */
		ALLJOYN_DICT_ENTRY_OPEN  = '{', /**< Never actually used as a typeId: specified as ALLJOYN_DICT_ENTRY */
		ALLJOYN_DICT_ENTRY_CLOSE = '}', /**< Never actually used as a typeId: specified as ALLJOYN_DICT_ENTRY */
		
		ALLJOYN_BOOLEAN_ARRAY    = ('b' << 8) | 'a',   ///< AllJoyn array of booleans
		ALLJOYN_DOUBLE_ARRAY     = ('d' << 8) | 'a',   ///< AllJoyn array of IEEE 754 doubles
		ALLJOYN_INT32_ARRAY      = ('i' << 8) | 'a',   ///< AllJoyn array of 32-bit signed integers
		ALLJOYN_INT16_ARRAY      = ('n' << 8) | 'a',   ///< AllJoyn array of 16-bit signed integers
		ALLJOYN_UINT16_ARRAY     = ('q' << 8) | 'a',   ///< AllJoyn array of 16-bit unsigned integers
		ALLJOYN_UINT64_ARRAY     = ('t' << 8) | 'a',   ///< AllJoyn array of 64-bit unsigned integers
		ALLJOYN_UINT32_ARRAY     = ('u' << 8) | 'a',   ///< AllJoyn array of 32-bit unsigned integers
		ALLJOYN_INT64_ARRAY      = ('x' << 8) | 'a',   ///< AllJoyn array of 64-bit signed integers
		ALLJOYN_BYTE_ARRAY       = ('y' << 8) | 'a',   ///< AllJoyn array of 8-bit unsigned integers
		
		ALLJOYN_WILDCARD         = '*'     ///< This never appears in a signature but is used for matching arbitrary message args
		
		
		}
		// typedef enum {
		// ALLJOYN_INVALID          =  0,     ///< AllJoyn INVALID typeId
		// ALLJOYN_ARRAY            = 'a',    ///< AllJoyn array container type
		// ALLJOYN_BOOLEAN          = 'b',    ///< AllJoyn boolean basic type, @c 0 is @c FALSE and @c 1 is @c TRUE - Everything else is invalid
		// ALLJOYN_DOUBLE           = 'd',    ///< AllJoyn IEEE 754 double basic type
		// ALLJOYN_DICT_ENTRY       = 'e',    ///< AllJoyn dictionary or map container type - an array of key-value pairs
		// ALLJOYN_SIGNATURE        = 'g',    ///< AllJoyn signature basic type
		// ALLJOYN_HANDLE           = 'h',    ///< AllJoyn socket handle basic type
		// ALLJOYN_INT32            = 'i',    ///< AllJoyn 32-bit signed integer basic type
		// ALLJOYN_INT16            = 'n',    ///< AllJoyn 16-bit signed integer basic type
		// ALLJOYN_OBJECT_PATH      = 'o',    ///< AllJoyn Name of an AllJoyn object instance basic type
		// ALLJOYN_UINT16           = 'q',    ///< AllJoyn 16-bit unsigned integer basic type
		// ALLJOYN_STRUCT           = 'r',    ///< AllJoyn struct container type
		// ALLJOYN_STRING           = 's',    ///< AllJoyn UTF-8 NULL terminated string basic type
		// ALLJOYN_UINT64           = 't',    ///< AllJoyn 64-bit unsigned integer basic type
		// ALLJOYN_UINT32           = 'u',    ///< AllJoyn 32-bit unsigned integer basic type
		// ALLJOYN_VARIANT          = 'v',    ///< AllJoyn variant container type
		// ALLJOYN_INT64            = 'x',    ///< AllJoyn 64-bit signed integer basic type
		// ALLJOYN_BYTE             = 'y',    ///< AllJoyn 8-bit unsigned integer basic type
		// 
		// ALLJOYN_STRUCT_OPEN      = '(', /**< Never actually used as a typeId: specified as ALLJOYN_STRUCT */
		// ALLJOYN_STRUCT_CLOSE     = ')', /**< Never actually used as a typeId: specified as ALLJOYN_STRUCT */
		// ALLJOYN_DICT_ENTRY_OPEN  = '{', /**< Never actually used as a typeId: specified as ALLJOYN_DICT_ENTRY */
		// ALLJOYN_DICT_ENTRY_CLOSE = '}', /**< Never actually used as a typeId: specified as ALLJOYN_DICT_ENTRY */
		// 
		// ALLJOYN_BOOLEAN_ARRAY    = ('b' << 8) | 'a',   ///< AllJoyn array of booleans
		// ALLJOYN_DOUBLE_ARRAY     = ('d' << 8) | 'a',   ///< AllJoyn array of IEEE 754 doubles
		// ALLJOYN_INT32_ARRAY      = ('i' << 8) | 'a',   ///< AllJoyn array of 32-bit signed integers
		// ALLJOYN_INT16_ARRAY      = ('n' << 8) | 'a',   ///< AllJoyn array of 16-bit signed integers
		// ALLJOYN_UINT16_ARRAY     = ('q' << 8) | 'a',   ///< AllJoyn array of 16-bit unsigned integers
		// ALLJOYN_UINT64_ARRAY     = ('t' << 8) | 'a',   ///< AllJoyn array of 64-bit unsigned integers
		// ALLJOYN_UINT32_ARRAY     = ('u' << 8) | 'a',   ///< AllJoyn array of 32-bit unsigned integers
		// ALLJOYN_INT64_ARRAY      = ('x' << 8) | 'a',   ///< AllJoyn array of 64-bit signed integers
		// ALLJOYN_BYTE_ARRAY       = ('y' << 8) | 'a',   ///< AllJoyn array of 8-bit unsigned integers
		// 
		// ALLJOYN_WILDCARD         = '*'     ///< This never appears in a signature but is used for matching arbitrary message args
		// 
		// } alljoyn_typeid;
		// 

//
    public partial class MsgArg : AllJoynWrapper
    {
        internal MsgArg(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Create a new message argument.
		/// calling alljoyn_msgarg_create() is the same as calling
		/// alljoyn_msgarg_array_create(1).
		/// </summary>
		/// <returns>the created message argument</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_create();
		// extern AJ_API alljoyn_msgarg AJ_CALL alljoyn_msgarg_create();

		/// <summary>
		/// Build a message argument that has its value already set. If the setting the
		/// message argument value fails for any reason the message argument type will be
		/// set to #ALLJOYN_INVALID. See the description of the #alljoyn_msgarg_set() function
		/// for information about the signature and parameters. For initializing complex
		/// values it is recommended to use the alljoyn_msgarg_create and alljoyn_msgarg_set
		/// functions so the success of setting the value can be explicitly checked.
		/// </summary>
		/// <param name="signature">The signature for alljoyn_msgarg value.</param>
		/// <param name="...">One or more values to initialize the alljoyn_msgarg.</param>
		/// <returns>the created alljoyn_msgarg</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_create_and_set([MarshalAs(UnmanagedType.LPStr)]string signature/*TODO: '...' type*/);
		// extern AJ_API alljoyn_msgarg AJ_CALL alljoyn_msgarg_create_and_set(const char* signature, ...);

		/// <summary>
		/// Destroy a message argument.
		/// </summary>
		/// <param name="arg">The message argument to destroy.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_destroy(IntPtr arg);
		// extern AJ_API void AJ_CALL alljoyn_msgarg_destroy(alljoyn_msgarg arg);

		/// <summary>
		/// Create an array of message arguments
		/// </summary>
		/// <remarks>
		/// <para>This returns and alljoyn_msgarg however the individual array elements can only
		/// be accessed using alljoyn_msgarg_array_element() function.
		/// </para>
		/// <para>the alljoyn_msgarg returned can be used in any functions that states says
		/// alljoyn_msgarg_array_*.  and alljoyn_msgarg created using alljoyn_msgarg_create()
		/// is an array of message arguments with size of 1.
		/// </para>
		/// <para>If the function does not specifically say it is for an array it is assumed that
		/// the message argument was created using alljoyn_msgarg_create() and will be treated
		/// like an array with only one element.
		/// </para>
		/// <para>For example the following code would only copy the first msgarg in the array.
		/// An alljoyn_msgarg of the string "hello". Not both array elements.
		/// </para>
		/// </remarks>
		/// <param name="size">the size of the array of alljoyn_msgargs</param>
		/// <returns>the created array of message arguments</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_array_create(UInt64 size);
		// extern AJ_API alljoyn_msgarg AJ_CALL alljoyn_msgarg_array_create(size_t size);

		/// <summary>
		/// when working with an array of message arguments this will return the nth item
		/// in the array.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that contains an array of msgargs</param>
		/// <param name="index">the index number of the element we wish to access.</param>
		/// <returns>the individual alljoyn_msgarg specified by the index</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_array_element(IntPtr arg, UInt64 index);
		// extern AJ_API alljoyn_msgarg AJ_CALL alljoyn_msgarg_array_element(alljoyn_msgarg arg, size_t index);

		/// <summary>
		/// Set value of a message arg from a signature and a list of values. Note that any values or
		/// alljoyn_msgarg pointers passed in must remain valid until this alljoyn_msgarg is freed using
		/// alljoyn_msgarg_delete.
		/// </summary>
		/// <remarks>
		/// <para>- @c 'a'  The array length followed by:
		/// - If the element type is a basic type a pointer to an array of values of that type.
		/// - If the element type is string a pointer to array of const char*, if array length is
		/// non-zero, and the char* pointer is NULL, the NULL must be followed by a pointer to
		/// an array of const qcc::String.
		/// - If the element type is an @ref ALLJOYN_ARRAY "ARRAY", @ref ALLJOYN_STRUCT "STRUCT",
		/// </para>
		/// </remarks>
		/// <param name="arg">The alljoyn_msgarg being set</param>
		/// <param name="signature">The signature for alljoyn_msgarg value</param>
		/// <param name="...">One or more values to initialize the alljoyn_msgarg.</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string signature/*TODO: '...' type*/);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set(alljoyn_msgarg arg, const char* signature, ...);

		/// <summary>
		/// Matches a signature to the alljoyn_msgarg and if the signature matches unpacks the component
		/// values of an alljoyn_msgarg. Note that the values returned are references into the
		/// alljoyn_msgarg itself so unless copied will become invalid if the alljoyn_msgarg is freed or
		/// goes out of scope.  This function resolves through variants, so if the alljoyn_msgarg is a
		/// variant that references a 32 bit integer it can be unpacked directly into a 32 bit integer
		/// pointer.
		/// </summary>
		/// <remarks>
		/// <para>- @c 'a'  A pointer to a length of type size_t that returns the number of elements in the array followed by:
		/// - If the element type is a scalar type a pointer to a pointer of the correct type for the values.
		/// - Otherwise a pointer to a pointer to an alljoyn_msgarg.
		/// </para>
		/// <para>- @c 'b'  A pointer to a bool
		/// - @c 'd'  A pointer to a double (64 bits)
		/// - @c 'g'  A pointer to a char*  (character string is valid for the lifetime of the alljoyn_msgarg)
		/// - @c 'h'  A pointer to a qcc::SocketFd
		/// - @c 'i'  A pointer to a uint32_t
		/// - @c 'n'  A pointer to an int16_t
		/// - @c 'o'  A pointer to a char*  (character string is valid for the lifetime of the alljoyn_msgarg)
		/// - @c 'q'  A pointer to a uint16_t
		/// - @c 's'  A pointer to a char*  (character string is valid for the lifetime of the alljoyn_msgarg)
		/// - @c 't'  A pointer to a uint64_t
		/// - @c 'u'  A pointer to a uint32_t
		/// - @c 'v'  A pointer to a pointer to an alljoyn_msgarg, matches to a variant but returns a pointer to
		/// the alljoyn_msgarg of the underlying real type.
		/// - @c 'x'  A pointer to an int64_t
		/// - @c 'y'  A pointer to a uint8_t
		/// </para>
		/// <para>- @c '(' and @c ')'  A list of pointers as required for each of the struct members.
		/// - @c '{' and @c '}'  Pointers as required for the key and value members.
		/// </para>
		/// <para>- @c '*' A pointer to a pointer to an alljoyn_msgarg. This matches any value type.
		/// </para>
		/// <para>Examples:
		/// </para>
		/// <para>A struct with and uint32 and two string elements.
		/// </para>
		/// </remarks>
		/// <param name="arg">The alljoyn_msgarg we are reading from</param>
		/// <param name="signature">The signature for alljoyn_msgarg value</param>
		/// <param name="...">Pointers to return the unpacked values.</param>
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string signature/*TODO: '...' type*/);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get(alljoyn_msgarg arg, const char* signature, ...);

		/// <summary>
		/// create a copy of a message argument.  This will create a new alljoyn_msgarg and
		/// must be cleaned up using alljoyn_msgarg_detroy.
		/// </summary>
		/// <param name="source">the alljoyn_msgarg to be copied</param>
		/// <returns>copy of the source message argument is returned</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_copy(IntPtr source);
		// extern AJ_API alljoyn_msgarg AJ_CALL alljoyn_msgarg_copy(const alljoyn_msgarg source);

		/// <summary>
		/// Copy the contents of the source alljoyn_msgarg into the Destination alljoyn_msgarg. If the
		/// destination already contains information it will be cleared before the source
		/// alljoyn_msgarg is copied in.
		/// </summary>
		/// <param name="destination">the alljoyn_msgarg that will hold the copy</param>
		/// <param name="source">the alljoyn_msgarg to be copied</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_clone(IntPtr destination, IntPtr source);
		// extern AJ_API void AJ_CALL alljoyn_msgarg_clone(alljoyn_msgarg destination, const alljoyn_msgarg source);

		/// <summary>
		/// Equality operator.
		/// </summary>
		/// <param name="lhv">The alljoyn_msgarg to compare.</param>
		/// <param name="rhv">The other alljoyn_msgarg to compare</param>
		/// <returns>Returns true if the two message args have the same signatures and values.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_equal(IntPtr lhv, IntPtr rhv);
		// extern AJ_API QCC_BOOL AJ_CALL alljoyn_msgarg_equal(alljoyn_msgarg lhv, alljoyn_msgarg rhv);

		/// <summary>
		/// Set an array of alljoyn_msgargs by applying the alljoyn_msgarg_set() function to each alljoyn_msgarg in turn.
		/// </summary>
		/// <param name="args">An array of alljoyn_msgargs to set.</param>
		/// <param name="numArgs">[in,out] On input the size of the args array. On output the number of alljoyn_msgargsthat were set. There must be at least enough alljoyn_msgargs to completely
		/// initialize the signature.</param>
		/// <param name="signature">The signature for alljoyn_msgarg values</param>
		/// <param name="...">One or more values to initialize the alljoyn_msgarg list.</param>
		/// <returns>- #ER_OK if the alljoyn_msgargs were successfully set.
		/// - #ER_BUS_TRUNCATED if the signature was longer than expected.
		/// - Other error status codes indicating a failure.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_array_set(IntPtr args, UInt64[] numArgs, [MarshalAs(UnmanagedType.LPStr)]string signature/*TODO: '...' type*/);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_array_set(alljoyn_msgarg args, size_t* numArgs, const char* signature, ...);

		/// <summary>
		/// Unpack an array of alljoyn_msgargs by applying the alljoyn_msgarg_get() function to each alljoyn_msgarg in turn.
		/// </summary>
		/// <param name="args">An array of alljoyn_msgargs to unpack.</param>
		/// <param name="numArgs">The size of the alljoyn_msgargs array.</param>
		/// <param name="signature">The signature to match against the alljoyn_msgarg values</param>
		/// <param name="...">Pointers to return references to the unpacked values.</param>
		/// <returns>- #ER_OK if the alljoyn_msgargs were successfully set.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - Other error status codes indicating a failure.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_array_get(IntPtr args, UInt64 numArgs, [MarshalAs(UnmanagedType.LPStr)]string signature/*TODO: '...' type*/);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_array_get(const alljoyn_msgarg args, size_t numArgs, const char* signature, ...);

		/// <summary>
		/// Returns an XML string representation of this type
		/// </summary>
		/// <param name="arg">The message arg to generate the XML string representation of</param>
		/// <param name="str">The character string that will hold the XML stringrepresentation of the alljoyn_msgarg</param><!-- out -->
		/// <param name="buf">The size of the char* array that will hold the string</param>
		/// <param name="indent">Number of spaces to indent the generated xml (default value 0)</param>
		/// <returns>The number of characters (including the terminating nul byte) whichwould have been written to the final string if enough space
		/// available.  Thus returning a value of buf or larger means the output
		/// was truncated.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_msgarg_tostring(IntPtr arg, sbyte str, UInt64 buf, UInt64 indent);
		// extern AJ_API size_t AJ_CALL alljoyn_msgarg_tostring(alljoyn_msgarg arg, char* str, size_t buf, size_t indent);

		/// <summary>
		/// Returns an XML string representation for an array of message args.
		/// </summary>
		/// <param name="args">The message arg array to generate the XML string representation of</param>
		/// <param name="numArgs">The size of the message arg array.</param>
		/// <param name="str">The character string that will hold the XML stringrepresentation of the alljoyn_msgarg array</param><!-- out -->
		/// <param name="buf">The size of the char* array that will hold the string</param>
		/// <param name="indent">Number of spaces to indent the generated xml (default value 0)</param>
		/// <returns>The number of characters (including the terminating nul byte) whichwould have been written to the final string if enough space is
		/// available.  Thus returning a value of buf or larger means the output
		/// was truncated.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_msgarg_array_tostring(IntPtr args, UInt64 numArgs, sbyte str, UInt64 buf, UInt64 indent);
		// extern AJ_API size_t AJ_CALL alljoyn_msgarg_array_tostring(const alljoyn_msgarg args, size_t numArgs, char* str, size_t buf, size_t indent);

		/// <summary>
		/// Returns a string for the signature of this value
		/// </summary>
		/// <param name="arg">the argument to read the signature from</param>
		/// <param name="str">a string containing the signature of the alljoyn_msgarg use NULL pointerto find string size.</param><!-- out -->
		/// <param name="buf">The size of the char* array that will hold the string</param>
		/// <returns>The number of characters (including the terminating nul byte) whichwould have been written to the final string if enough space is
		/// available.  Thus returning a value of buf or larger means the output
		/// was truncated.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_msgarg_signature(IntPtr arg, sbyte str, UInt64 buf);
		// extern AJ_API size_t AJ_CALL alljoyn_msgarg_signature(alljoyn_msgarg arg, char* str, size_t buf);

		/// <summary>
		/// Returns a string representation of the signature of an array of message args.
		/// </summary>
		/// <param name="values">A pointer to an array of message arg values</param>
		/// <param name="numValues">Length of the array</param>
		/// <param name="str">a string containing the signature of the alljoyn_msgarg use NULLpointer to find string size.</param><!-- out -->
		/// <param name="buf">The size of the char* array that will hold the string</param>
		/// <returns>The number of characters (including the terminating nul byte) whichwould have been written to the final string if enough space is
		/// available.  Thus returning a value of buf or larger means the output
		/// was truncated.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_msgarg_array_signature(IntPtr values, UInt64 numValues, sbyte str, UInt64 buf);
		// extern AJ_API size_t AJ_CALL alljoyn_msgarg_array_signature(alljoyn_msgarg values, size_t numValues, char* str, size_t buf);

		/// <summary>
		/// Checks the signature of this arg.
		/// </summary>
		/// <param name="arg">The message argument we want to check the signature of</param>
		/// <param name="signature">The signature to check</param>
		/// <returns>true if this arg has the specified signature, otherwise returns false.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_hassignature(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string signature);
		// extern AJ_API QCC_BOOL AJ_CALL alljoyn_msgarg_hassignature(alljoyn_msgarg arg, const char* signature);

		/// <summary>
		/// Helper function for accessing dictionary elements. The alljoyn_msgarg must be an array of dictionary
		/// elements. The second parameter is the key value, this is expressed according to the rules for
		/// alljoyn_msgarg_set so is either a scalar, a pointer to a string, or for 64 bit values a pointer to
		/// the value. This value is matched against the dictionary array to locate the matching element.
		/// The third and subsequent parameters are unpacked according to the rules of alljoyn_msgarg_get.
		/// </summary>
		/// <remarks>
		/// <para>For example, where the key is a string and the values are structs:
		/// </para>
		/// </remarks>
		/// <param name="arg">a message argument containing an array of dictionary elements</param>
		/// <param name="elemSig">The expected signature for the dictionary element, e.g. "{su}"</param>
		/// <param name="...">Pointers to return unpacked key values.</param>
		/// <returns>- #ER_OK if the dictionary signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_NOT_A_DICTIONARY if this function is called on an alljoyn_msgarg that is not a dictionary.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - #ER_BUS_ELEMENT_NOT_FOUND if the key was not found in the dictionary.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_getdictelement(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string elemSig/*TODO: '...' type*/);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_getdictelement(alljoyn_msgarg arg, const char* elemSig, ...);

		/// <summary>
		/// Get the alljoyn_typeid of the alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the message argument we want to know the alljoyn_typeid of.</param>
		/// <returns>the alljoyn_typeid of the alljoyn_msgarg</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern alljoyn_typeid alljoyn_msgarg_gettype(IntPtr arg);
		// extern AJ_API alljoyn_typeid AJ_CALL alljoyn_msgarg_gettype(alljoyn_msgarg arg);

		/// <summary>
		/// Clear the alljoyn_msgarg setting the type to ALLJOYN_INVALID and freeing any memory allocated for the
		/// alljoyn_msgarg value.
		/// </summary>
		/// <param name="arg">the message argument to be cleared.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_clear(IntPtr arg);
		// extern AJ_API void AJ_CALL alljoyn_msgarg_clear(alljoyn_msgarg arg);

		/// <summary>
		/// Makes an alljoyn_msgarg stable by completely copying the contents into locally
		/// managed memory. After an alljoyn_msgarg has been stabilized any values used to
		/// initialize or set the message arg can be freed.
		/// </summary>
		/// <param name="arg">the message argument to stabilize</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_stabilize(IntPtr arg);
		// extern AJ_API void AJ_CALL alljoyn_msgarg_stabilize(alljoyn_msgarg arg);

		/// <summary>
		/// Set an array of alljoyn_msgargs by applying the alljoyn_msgarg_set() function
		/// to each alljoyn_msgarg in turn.
		/// </summary>
		/// <param name="args">An array of alljoyn_msgargs to set.</param>
		/// <param name="argOffset">Offset from the start of the alljoyn_msgarg array.</param>
		/// <param name="numArgs">[in,out] On input the number of args to set. On output the number of alljoyn_msgargsthat were set. There must be at least enough alljoyn_msgargs to completely
		/// initialize the signature.
		/// there should at least enough.</param>
		/// <param name="signature">The signature for alljoyn_msgarg values</param>
		/// <param name="...">One or more values to initialize the alljoyn_msgarg list.</param>
		/// <returns>- #ER_OK if the alljoyn_msgargs were successfully set.
		/// - #ER_BUS_TRUNCATED if the signature was longer than expected.
		/// - Other error status codes indicating a failure.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_array_set_offset(IntPtr args, UInt64 argOffset, UInt64[] numArgs, [MarshalAs(UnmanagedType.LPStr)]string signature/*TODO: '...' type*/);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_array_set_offset(alljoyn_msgarg args, size_t argOffset, size_t* numArgs, const char* signature, ...);

		/// <summary>
		/// This function is identical to alljoyn_msgarg_set except after the values
		/// in the message arg have been set the alljoyn_msgarg will be stabilized.
		/// This is useful when the call is made from a manage language like C sharp where
		/// objects like strings may be garbage collected.
		/// </summary>
		/// <param name="arg">The alljoyn_msgarg being set</param>
		/// <param name="signature">The signature for alljoyn_msgarg value</param>
		/// <param name="...">One or more values to initialize the alljoyn_msgarg.</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_and_stabilize(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string signature/*TODO: '...' type*/);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_and_stabilize(alljoyn_msgarg arg, const char* signature, ...);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an uint8 (byte).
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the uint8 (byte)</param>
		/// <param name="y">a  uint8</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg walljoyn_msgargcessfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_uint8(IntPtr arg, byte y);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_uint8(alljoyn_msgarg arg, uint8_t y);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold a QCC_BOOL.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the QCC_BOOL</param>
		/// <param name="b">a QCC_BOOL</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_bool(IntPtr arg, Int32 b);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_bool(alljoyn_msgarg arg, QCC_BOOL b);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an int16.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the int16</param>
		/// <param name="n">an int16</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_int16(IntPtr arg, Int16 n);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_int16(alljoyn_msgarg arg, int16_t n);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an uint16.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the uint16</param>
		/// <param name="q">an uint16</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_uint16(IntPtr arg, UInt16 q);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_uint16(alljoyn_msgarg arg, uint16_t q);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an int32.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the int32</param>
		/// <param name="i">an int32</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_int32(IntPtr arg, Int32 i);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_int32(alljoyn_msgarg arg, int32_t i);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an uint32.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the uint32</param>
		/// <param name="u">an uint32</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_uint32(IntPtr arg, UInt32 u);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_uint32(alljoyn_msgarg arg, uint32_t u);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an int64.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the int64</param>
		/// <param name="x">an int64</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_int64(IntPtr arg, Int64 x);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_int64(alljoyn_msgarg arg, int64_t x);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an uint64.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the uint64</param>
		/// <param name="t">an uint64</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_uint64(IntPtr arg, UInt64 t);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_uint64(alljoyn_msgarg arg, uint64_t t);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an double.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the double</param>
		/// <param name="d">an double</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_double(IntPtr arg, double d);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_double(alljoyn_msgarg arg, double d);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold a string.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the string</param>
		/// <param name="s">an string</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_string(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string s);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_string(alljoyn_msgarg arg, const char* s);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an object path
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the object path</param>
		/// <param name="o">an object path string</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_objectpath(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string o);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_objectpath(alljoyn_msgarg arg, const char* o);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold a signature.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg that will hold the signature</param>
		/// <param name="g">a signature string</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_signature(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string g);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_signature(alljoyn_msgarg arg, const char* g);

		/// <summary>
		/// Get an uint8 (bytes) from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="y">a pointer to the uint8 (byte)</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_uint8(IntPtr arg, byte y);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_uint8(const alljoyn_msgarg arg, uint8_t* y);

		/// <summary>
		/// Get a QCC_BOOL from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="b">a pointer to the QCC_BOOL</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_bool(IntPtr arg, Int32 b);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_bool(const alljoyn_msgarg arg, QCC_BOOL* b);

		/// <summary>
		/// Get an int16 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="n">a pointer to the int16</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_int16(IntPtr arg, Int16 n);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_int16(const alljoyn_msgarg arg, int16_t* n);

		/// <summary>
		/// Get an uint16 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="q">a pointer to the uint16</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_uint16(IntPtr arg, UInt16 q);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_uint16(const alljoyn_msgarg arg, uint16_t* q);

		/// <summary>
		/// Get an int32 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="i">a pointer to the int32</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_int32(IntPtr arg, Int32 i);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_int32(const alljoyn_msgarg arg, int32_t* i);

		/// <summary>
		/// Get an uint32 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="u">a pointer to the uint32</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_uint32(IntPtr arg, UInt32 u);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_uint32(const alljoyn_msgarg arg, uint32_t* u);

		/// <summary>
		/// Get an int64 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="x">a pointer to the int64</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_int64(IntPtr arg, Int64 x);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_int64(const alljoyn_msgarg arg, int64_t* x);

		/// <summary>
		/// Get an uint64 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="t">a pointer to the uint64</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_uint64(IntPtr arg, UInt64 t);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_uint64(const alljoyn_msgarg arg, uint64_t* t);

		/// <summary>
		/// Get a double from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="d">a pointer to the double</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_double(IntPtr arg, double d);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_double(const alljoyn_msgarg arg, double* d);

		/// <summary>
		/// Get a string from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="s">a pointer to the string</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_string(IntPtr arg, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] s);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_string(const alljoyn_msgarg arg, char** s);

		/// <summary>
		/// Get an object path from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="o">a pointer to the object path string</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_objectpath(IntPtr arg, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] o);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_objectpath(const alljoyn_msgarg arg, char** o);

		/// <summary>
		/// Get a signature from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="g">a pointer to the signature string</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_signature(IntPtr arg, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] g);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_signature(const alljoyn_msgarg arg, char** g);

		/// <summary>
		/// Get the alljoyn_msgarg from an variant alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="v">the alljoyn_msgarg that will be returned</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_variant(IntPtr arg, IntPtr v);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_variant(const alljoyn_msgarg arg, alljoyn_msgarg v);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of uint8s (bytes).
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of uint8s (bytes)</param>
		/// <param name="ay">a pointer to an array of uint8s (bytes)</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_uint8_array(IntPtr arg, UInt64 length, byte[] ay);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_uint8_array(alljoyn_msgarg arg, size_t length, uint8_t* ay);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of QCC_BOOLs.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of QCC_BOOLs</param>
		/// <param name="ab">a pointer to an array of QCC_BOOLs</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_bool_array(IntPtr arg, UInt64 length, Int32[] ab);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_bool_array(alljoyn_msgarg arg, size_t length, QCC_BOOL* ab);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of int16s.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of int16s</param>
		/// <param name="an">a pointer to an array of int16s</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_int16_array(IntPtr arg, UInt64 length, Int16[] an);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_int16_array(alljoyn_msgarg arg, size_t length, int16_t* an);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of uint16s.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of uint16s</param>
		/// <param name="aq">a pointer to an array of uint16s</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_uint16_array(IntPtr arg, UInt64 length, UInt16[] aq);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_uint16_array(alljoyn_msgarg arg, size_t length, uint16_t* aq);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of int32s.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of int32s</param>
		/// <param name="ai">a pointer to an array of int32s</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_int32_array(IntPtr arg, UInt64 length, Int32[] ai);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_int32_array(alljoyn_msgarg arg, size_t length, int32_t* ai);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of uint32s.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of uint32s</param>
		/// <param name="au">a pointer to an array of uint32s</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_uint32_array(IntPtr arg, UInt64 length, UInt32[] au);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_uint32_array(alljoyn_msgarg arg, size_t length, uint32_t* au);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of int64s.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of int64s</param>
		/// <param name="ax">a pointer to an array of int64s</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_int64_array(IntPtr arg, UInt64 length, Int64[] ax);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_int64_array(alljoyn_msgarg arg, size_t length, int64_t* ax);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of uint64s.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of uint64s</param>
		/// <param name="at">a pointer to an array of uint64s</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_uint64_array(IntPtr arg, UInt64 length, UInt64[] at);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_uint64_array(alljoyn_msgarg arg, size_t length, uint64_t* at);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of doubles.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of dobules</param>
		/// <param name="ad">a pointer to an array of doubles</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_double_array(IntPtr arg, UInt64 length, double[] ad);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_double_array(alljoyn_msgarg arg, size_t length, double* ad);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of strings.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of object paths</param>
		/// <param name="@as">a pointer to an array of object paths</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_string_array(IntPtr arg, UInt64 length, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)]string[] @as);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_string_array(alljoyn_msgarg arg, size_t length, const char** as);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of object paths.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of object paths</param>
		/// <param name="ao">a pointer to an array of object paths</param>
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_objectpath_array(IntPtr arg, UInt64 length, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)]string[] ao);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_objectpath_array(alljoyn_msgarg arg, size_t length, const char** ao);

		/// <summary>
		/// Set the value of an alljoyn_msgarg to hold an array of signatures.
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to set</param>
		/// <param name="length">the size of the array of signatures</param><!-- out -->
		/// <param name="ag">a pointer to an array of signatures</param><!-- out -->
		/// <returns>- #ER_OK if the alljoyn_msgarg was successfully set
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_set_signature_array(IntPtr arg, UInt64 length, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] out string[] ag);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_set_signature_array(alljoyn_msgarg arg, size_t length, const char** ag);

		/// <summary>
		/// get an array of uint8s (bytes) from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the uint8 (byte) array</param><!-- out -->
		/// <param name="ay">a pointer to the uint8 (byte) array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_uint8_array(IntPtr arg, UInt64 length, byte ay);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_uint8_array(const alljoyn_msgarg arg, size_t* length, uint8_t* ay);

		/// <summary>
		/// get an array of QCC_BOOLs from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the QCC_BOOL array</param><!-- out -->
		/// <param name="ab">a pointer to the QCC_BOOL array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_bool_array(IntPtr arg, UInt64 length, Int32 ab);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_bool_array(const alljoyn_msgarg arg, size_t* length, QCC_BOOL* ab);

		/// <summary>
		/// get an array of int16 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the int16 array</param><!-- out -->
		/// <param name="an">a pointer to the int16 array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_int16_array(IntPtr arg, UInt64 length, Int16 an);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_int16_array(const alljoyn_msgarg arg, size_t* length, int16_t* an);

		/// <summary>
		/// get an array of uint16s from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the uint16 array</param><!-- out -->
		/// <param name="aq">a pointer to the uint16 array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_uint16_array(IntPtr arg, UInt64 length, UInt16 aq);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_uint16_array(const alljoyn_msgarg arg, size_t* length, uint16_t* aq);

		/// <summary>
		/// get an array of int32 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the int32 array</param><!-- out -->
		/// <param name="ai">a pointer to the int32 array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_int32_array(IntPtr arg, UInt64 length, Int32 ai);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_int32_array(const alljoyn_msgarg arg, size_t* length, int32_t* ai);

		/// <summary>
		/// get an array of uint32 from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the uint32 array</param><!-- out -->
		/// <param name="au">a pointer to the uint32 array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_uint32_array(IntPtr arg, UInt64 length, UInt32 au);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_uint32_array(const alljoyn_msgarg arg, size_t* length, uint32_t* au);

		/// <summary>
		/// get an array of int64s from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the int64 array</param><!-- out -->
		/// <param name="ax">a pointer to the int64 array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_int64_array(IntPtr arg, UInt64 length, Int64 ax);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_int64_array(const alljoyn_msgarg arg, size_t* length, int64_t* ax);

		/// <summary>
		/// get an array of uint64s from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the uint64 array</param><!-- out -->
		/// <param name="at">a pointer to the uint64 array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_uint64_array(IntPtr arg, UInt64 length, UInt64 at);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_uint64_array(const alljoyn_msgarg arg, size_t* length, uint64_t* at);

		/// <summary>
		/// get an array of doubles from an alljoyn_msgarg
		/// </summary>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="length">the size of the double array</param><!-- out -->
		/// <param name="ad">a pointer to the double array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_double_array(IntPtr arg, UInt64 length, double ad);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_double_array(const alljoyn_msgarg arg, size_t* length, double* ad);

		/// <summary>
		/// get an array of alljoyn_msgargs from an alljoyn_msgarg.
		/// </summary>
		/// <remarks>
		/// <para>This function can be used for any array that contains an array of alljoyn_msgargs.
		/// This would be non-scalar arrays. i.e. as, ao, ag, a{is}, av etc.
		/// </para>
		/// </remarks>
		/// <param name="arg">the alljoyn_msgarg to obtain the data from</param>
		/// <param name="arg_">the signature of the array</param>
		/// <param name="length">the size of the array</param><!-- out -->
		/// <param name="av">a pointer to the alljoyn_msgarg array</param><!-- out -->
		/// <returns>- #ER_OK if the signature matched and alljoyn_msgarg was successfully unpacked.
		/// - #ER_BUS_SIGNATURE_MISMATCH if the signature did not match.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_get_variant_array(IntPtr arg, [MarshalAs(UnmanagedType.LPStr)]string signature, UInt64 length, IntPtr av);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_get_variant_array(const alljoyn_msgarg arg, const char* signature, size_t* length, alljoyn_msgarg* av);

		/// <summary>
		/// How many elements are in the alljoyn array
		/// </summary>
		/// <param name="arg">The alljoyn_msgarg that contains the array elements</param>
		/// <returns>the number of elements in the alljoyn_msgarg</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_msgarg_get_array_numberofelements(IntPtr arg);
		// extern AJ_API size_t AJ_CALL alljoyn_msgarg_get_array_numberofelements(const alljoyn_msgarg arg);

		/// <summary>
		/// Obtain a single alljoyn_msgarg element from an array of alljoyn_msgarg elements
		/// </summary>
		/// <param name="arg">The alljoyn_msgarg that contains the array element</param>
		/// <param name="index">The index value for the individual alljoyn_msgarg</param>
		/// <param name="element">The alljoyn_msgarg located at the index</param><!-- out -->
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_get_array_element(IntPtr arg, UInt64 index, IntPtr element);
		// extern AJ_API void AJ_CALL   alljoyn_msgarg_get_array_element(const alljoyn_msgarg arg, size_t index, alljoyn_msgarg* element);

		/// <summary>
		/// Obtain the signature of an element inside an array of alljoyn_msgargs
		/// </summary>
		/// <param name="arg">The alljoyn_msgarg that contains the signature</param>
		/// <param name="index">The index value for the individual alljoyn_msgarg</param>
		/// <returns>the string representing the signature of the element</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_get_array_elementsignature(IntPtr arg, UInt64 index);
		// extern AJ_API const char* AJ_CALL alljoyn_msgarg_get_array_elementsignature(const alljoyn_msgarg arg, size_t index);

		/// <summary>
		/// MsgArg functions for dictionaries
		/// </summary>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_getkey(IntPtr arg);
		// extern AJ_API alljoyn_msgarg AJ_CALL alljoyn_msgarg_getkey(alljoyn_msgarg arg);

		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_getvalue(IntPtr arg);
		// extern AJ_API alljoyn_msgarg AJ_CALL alljoyn_msgarg_getvalue(alljoyn_msgarg arg);

		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_setdictentry(IntPtr arg, IntPtr key, IntPtr value);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_setdictentry(alljoyn_msgarg arg, alljoyn_msgarg key, alljoyn_msgarg value);

		/// <summary>
		/// MsgArg functions for structs
		/// </summary>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_msgarg_setstruct(IntPtr arg, IntPtr struct_members, UInt64 num_members);
		// extern AJ_API QStatus AJ_CALL alljoyn_msgarg_setstruct(alljoyn_msgarg arg, alljoyn_msgarg struct_members, size_t num_members);

		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_msgarg_getnummembers(IntPtr arg);
		// extern AJ_API size_t AJ_CALL alljoyn_msgarg_getnummembers(alljoyn_msgarg arg);

		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_msgarg_getmember(IntPtr arg, UInt64 index);
		// extern AJ_API alljoyn_msgarg AJ_CALL alljoyn_msgarg_getmember(alljoyn_msgarg arg, size_t index);


    }
}