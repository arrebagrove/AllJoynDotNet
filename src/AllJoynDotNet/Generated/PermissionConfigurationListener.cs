// Generated from PermissionConfigurationListener.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Type for the FactoryReset callback.
		/// </summary>
		/// <remarks>
		/// <para>Framework requests application do a factory reset of its state.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer passed into the alljoyn_permissionconfigurationlistener_create function.</param>
		/// 
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		internal delegate QStatus alljoyn_permissionconfigurationlistener_factoryreset_ptr(IntPtr context);
		// typedef QStatus (AJ_CALL * alljoyn_permissionconfigurationlistener_factoryreset_ptr)(const void* context);
		// 

		/// <summary>
		/// Type for the PolicyChanged callback.
		/// </summary>
		/// <remarks>
		/// <para>Framework notifies application of a security policy change.
		/// </para>
		/// </remarks>
		/// <param name="context">The context pointer passed into the alljoyn_permissionconfigurationlistener_create function.</param>
		/// 
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		internal delegate void alljoyn_permissionconfigurationlistener_policychanged_ptr(IntPtr context);
		// typedef void (AJ_CALL * alljoyn_permissionconfigurationlistener_policychanged_ptr)(const void* context);
		// 

		/// <summary>
		/// Structure used during alljoyn_permissionconfigurationlistener_create to provide callbacks into C.
		/// </summary>
		/// 
		[StructLayout(LayoutKind.Sequential)]
		internal partial class alljoyn_permissionconfigurationlistener_callbacks
		{
			public alljoyn_permissionconfigurationlistener_factoryreset_ptr factory_reset;
			public alljoyn_permissionconfigurationlistener_policychanged_ptr policy_changed;
			//
			///**
			//* Framework requests application factory reset.
			//*/
			//alljoyn_permissionconfigurationlistener_factoryreset_ptr factory_reset;
			//
			///**
			//* Framework notifies application of a security policy change.
			//*/
			//alljoyn_permissionconfigurationlistener_policychanged_ptr policy_changed;
			//
		}
		// typedef struct {
		// /**
		// * Framework requests application factory reset.
		// */
		// alljoyn_permissionconfigurationlistener_factoryreset_ptr factory_reset;
		// 
		// /**
		// * Framework notifies application of a security policy change.
		// */
		// alljoyn_permissionconfigurationlistener_policychanged_ptr policy_changed;
		// } alljoyn_permissionconfigurationlistener_callbacks;
		// 

//
    public partial class PermissionConfigurationListener : AllJoynWrapper
    {
        internal PermissionConfigurationListener(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Create an alljoyn_permissionconfigurationlistener which will trigger the
		/// provided callbacks, passing along the provided context.
		/// </summary>
		/// <param name="callbacks">Callbacks to trigger for associated events.</param>
		/// <param name="context">Context to pass to callback functions.</param>
		/// <returns>Handle to newly allocated alljoyn_permissionconfigurationlistener.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_permissionconfigurationlistener_create(alljoyn_permissionconfigurationlistener_callbacks callbacks, IntPtr context);
		// extern AJ_API alljoyn_permissionconfigurationlistener AJ_CALL alljoyn_permissionconfigurationlistener_create(const alljoyn_permissionconfigurationlistener_callbacks* callbacks, const void* context);

		/// <summary>
		/// Destroy an alljoyn_permissionconfigurationlistener.
		/// </summary>
		/// <param name="listener">alljoyn_permissionconfigurationlistener to destroy.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern void alljoyn_permissionconfigurationlistener_destroy(IntPtr listener);
		// extern AJ_API void AJ_CALL alljoyn_permissionconfigurationlistener_destroy(alljoyn_permissionconfigurationlistener listener);


    }
}