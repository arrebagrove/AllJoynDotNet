// Generated from ProxyBusObject.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
		/// <summary>
		/// Callback registered with alljoyn_proxybusobject_introspectremoteobjectasync()
		/// </summary>
		/// <param name="status">ER_OK if successful</param>
		/// <param name="obj">Remote bus object that was introspected</param>
		/// <param name="context">Context passed in IntrospectRemoteObjectAsync()</param>
		/// 
		internal delegate void alljoyn_proxybusobject_listener_introspectcb_ptr(Int32 status, IntPtr obj, IntPtr context);
		// typedef void (AJ_CALL * alljoyn_proxybusobject_listener_introspectcb_ptr)(QStatus status, alljoyn_proxybusobject obj, void* context);
		// 

		/// <summary>
		/// Callback registered with alljoyn_proxybusobject_getpropertyasync()
		/// </summary>
		/// <param name="status">- #ER_OK if the property get request was successfull or:- #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the specified interfaces does not exist on the remote object.
		/// - #ER_BUS_NO_SUCH_PROPERTY if the property does not exist
		/// - Other error status codes indicating the reason the get request failed.</param>
		/// <param name="obj">Remote bus object that was introspected</param>
		/// <param name="value">If status is ER_OK a MsgArg containing the returned property value</param>
		/// <param name="context">Caller provided context passed in to alljoyn_proxybusobject_getpropertyasync()</param>
		/// 
		internal delegate void alljoyn_proxybusobject_listener_getpropertycb_ptr(Int32 status, IntPtr obj, IntPtr value, IntPtr context);
		// typedef void (AJ_CALL * alljoyn_proxybusobject_listener_getpropertycb_ptr)(QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context);
		// 

		/// <summary>
		/// Callback registered with alljoyn_proxybusobject_getallpropertiesasync()
		/// </summary>
		/// <param name="status">- #ER_OK if the get all properties request was successfull or:- #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the specified interfaces does not exist on the remote object.
		/// - Other error status codes indicating the reason the get request failed.</param>
		/// <param name="obj">Remote bus object that was introspected</param>
		/// <param name="values">If status is ER_OK an array of dictionary entries, signature "a{sv}" listing the properties.</param>
		/// <param name="context">Caller provided context passed in to alljoyn_proxybusobject_getallpropertiesasync()</param>
		/// 
		internal delegate void alljoyn_proxybusobject_listener_getallpropertiescb_ptr(Int32 status, IntPtr obj, IntPtr values, IntPtr context);
		// typedef void (AJ_CALL * alljoyn_proxybusobject_listener_getallpropertiescb_ptr)(QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg values, void* context);
		// 

		/// <summary>
		/// Callback registered with alljoyn_proxybusobject_setpropertyasync()
		/// </summary>
		/// <param name="status">- ER_OK if the property was successfully set or:- #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the specified interfaces does not exist on the remote object.
		/// - #ER_BUS_NO_SUCH_PROPERTY if the property does not exist
		/// - Other error status codes indicating the reason the set request failed.</param>
		/// <param name="obj">Remote bus object that was introspected</param>
		/// <param name="context">Caller provided context passed in to alljoyn_proxybusobject_setpropertyasync()</param>
		/// 
		internal delegate void alljoyn_proxybusobject_listener_setpropertycb_ptr(Int32 status, IntPtr obj, IntPtr context);
		// typedef void (AJ_CALL * alljoyn_proxybusobject_listener_setpropertycb_ptr)(QStatus status, alljoyn_proxybusobject obj, void* context);
		// 

		/// <summary>
		/// Callback to receive property changed events.
		/// </summary>
		/// <param name="obj">Remote bus object that owns the property that changed.</param>
		/// <param name="ifaceName">Name of the interface that defines the property.</param>
		/// <param name="changed">Property values that changed as an array of dictionary entries, signature "a{sv}".</param>
		/// <param name="invalidated">Properties whose values have been invalidated, signature "as".</param>
		/// <param name="context">Caller provided context passed in to RegisterPropertiesChangedListener</param>
		/// 
		internal delegate void alljoyn_proxybusobject_listener_propertieschanged_ptr(IntPtr obj, [MarshalAs(UnmanagedType.LPStr)]string ifaceName, IntPtr changed, IntPtr invalidated, IntPtr context);
		// typedef void (AJ_CALL * alljoyn_proxybusobject_listener_propertieschanged_ptr)(alljoyn_proxybusobject obj, const char* ifaceName, const alljoyn_msgarg changed, const alljoyn_msgarg invalidated, void* context);
		// 

//
    public partial class ProxyBusObject : AllJoynWrapper
    {
        internal ProxyBusObject(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Create an empty proxy bus object that refers to an object at given remote service name. Note
		/// that the created proxy bus object does not contain information about the interfaces that the
		/// actual remote object implements with the exception that org.freedesktop.DBus.Peer
		/// interface is special-cased (per the DBus spec) and can always be called on any object. Nor
		/// does it contain information about the child objects that the actual remote object might
		/// contain.
		/// </summary>
		/// <remarks>
		/// <para>To fill in this object with the interfaces and child object names that the actual remote
		/// object describes in its introspection data, call alljoyn_proxybusobject_introspectremoteobject() or
		/// alljoyn_proxybusobject_introspectremoteobjectasync().
		/// </para>
		/// </remarks>
		/// <param name="bus">The bus.</param>
		/// <param name="service">The remote service name (well-known or unique).</param>
		/// <param name="path">The absolute (non-relative) object path for the remote object.</param>
		/// <param name="sessionId">The session id the be used for communicating with remote object.</param>
		/// <returns>the allocated alljoyn_proxybusobject</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_create(IntPtr bus, [MarshalAs(UnmanagedType.LPStr)]string service, [MarshalAs(UnmanagedType.LPStr)]string path, IntPtr sessionId);
		// extern AJ_API alljoyn_proxybusobject AJ_CALL alljoyn_proxybusobject_create(alljoyn_busattachment bus, const char* service,const char* path, alljoyn_sessionid sessionId);

		/// <summary>
		/// Create an empty proxy bus object that refers to an object at given remote service name. Note
		/// that the created proxy bus object does not contain information about the interfaces that the
		/// actual remote object implements with the exception that org.freedesktop.DBus.Peer
		/// interface is special-cased (per the DBus spec) and can always be called on any object. Nor
		/// does it contain information about the child objects that the actual remote object might
		/// contain.
		/// </summary>
		/// <remarks>
		/// <para>proxybusobjects created using this function will require authentication.
		/// Unless the interfaces security policy is AJ_IFC_SECURITY_OFF.
		/// </para>
		/// <para>To fill in this object with the interfaces and child object names that the actual remote
		/// object describes in its introspection data, call alljoyn_proxybusobject_introspectremoteobject() or
		/// alljoyn_proxybusobject_introspectremoteobjectasync().
		/// </para>
		/// </remarks>
		/// <param name="bus">The bus.</param>
		/// <param name="service">The remote service name (well-known or unique).</param>
		/// <param name="path">The absolute (non-relative) object path for the remote object.</param>
		/// <param name="sessionId">The session id the be used for communicating with remote object.</param>
		/// <returns>the allocated alljoyn_proxybusobject</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_create_secure(IntPtr bus, [MarshalAs(UnmanagedType.LPStr)]string service, [MarshalAs(UnmanagedType.LPStr)]string path, IntPtr sessionId);
		// extern AJ_API alljoyn_proxybusobject AJ_CALL alljoyn_proxybusobject_create_secure(alljoyn_busattachment bus, const char* service,const char* path, alljoyn_sessionid sessionId);

		/// <summary>
		/// Destroy a proxy object created using alljoyn_proxybusobject_create.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object to destroy.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_destroy(IntPtr proxyObj);
		// extern AJ_API void AJ_CALL alljoyn_proxybusobject_destroy(alljoyn_proxybusobject proxyObj);

		/// <summary>
		/// Add an interface to this alljoyn_proxybusobject.
		/// </summary>
		/// <remarks>
		/// <para>Occasionally, AllJoyn library user may wish to call a method on
		/// an %alljoyn_proxybusobject that was not reported during introspection of the remote object.
		/// When this happens, the InterfaceDescription will have to be registered with the
		/// Bus manually and the interface will have to be added to the %alljoyn_proxybusobject using this function.
		/// </para>
		/// </remarks>
		/// <param name="proxyObj">The proxy bus object onto which the interface is to be added.</param>
		/// <param name="iface">The interface to add to this object. Must come from alljoyn_busattachment_getinterface.</param>
		/// <returns>- #ER_OK if successful.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_addinterface(IntPtr proxyObj, IntPtr iface);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_addinterface(alljoyn_proxybusobject proxyObj, const alljoyn_interfacedescription iface);

		/// <summary>
		/// Add an existing interface to this object using the interface's name.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object onto which the interface is to be added.</param>
		/// <param name="name">Name of existing interface to add to this object.</param>
		/// <returns>- #ER_OK if successful.
		/// - An error status otherwise.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_addinterface_by_name(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string name);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_addinterface_by_name(alljoyn_proxybusobject proxyObj, const char* name);

		/// <summary>
		/// Returns an array of alljoyn_proxybusobjects for the children of this %alljoyn_proxybusobject.
		/// </summary>
		/// <param name="proxyObj">The proxybus object we are getting the children from</param>
		/// <param name="children">An %alljoyn_proxybusobject array to receive the children. Can be NULL inwhich case no children are returned and the return value gives the number
		/// of children available.</param>
		/// <param name="numChildren">The size of the %alljoyn_proxybusobject array. If this value is smaller than the totalnumber of children only numChildren will be returned.</param>
		/// <returns>The number of children returned or the total number of children if children is NULL.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_proxybusobject_getchildren(IntPtr proxyObj, IntPtr children, UInt64 numChildren);
		// extern AJ_API size_t AJ_CALL alljoyn_proxybusobject_getchildren(alljoyn_proxybusobject proxyObj, alljoyn_proxybusobject* children, size_t numChildren);

		/// <summary>
		/// Get a path descendant alljoyn_proxybusobject (child) by its relative path name.
		/// </summary>
		/// <remarks>
		/// <para>For example, if this alljoyn_proxybusobject's path is @c "/foo/bar", then you can
		/// retrieve the alljoyn_proxybusobject for @c "/foo/bar/bat/baz" by calling
		/// </para>
		/// </remarks>
		/// <param name="proxyObj">The proxybus object we are getting the descendant from</param>
		/// <param name="path">The relative path for the child.</param>
		/// <returns>- The (potentially deep) descendant alljoyn_proxybusobject
		/// - NULL if not found.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_getchild(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string path);
		// extern AJ_API alljoyn_proxybusobject AJ_CALL alljoyn_proxybusobject_getchild(alljoyn_proxybusobject proxyObj, const char* path);

		/// <summary>
		/// Add a child object (direct or deep object path descendant) to this object.
		/// If you add a deep path descendant, this function will create intermediate
		/// alljoyn_proxybusobject children as needed.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object onto which the child object is to be added</param>
		/// <param name="child">Child alljoyn_proxybusobject</param>
		/// <returns>- #ER_OK if successful.
		/// - #ER_BUS_BAD_CHILD_PATH if the path is a bad path
		/// - #ER_BUS_OBJ_ALREADY_EXISTS the object already exists on the alljoyn_proxybusobject</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_addchild(IntPtr proxyObj, IntPtr child);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_addchild(alljoyn_proxybusobject proxyObj, const alljoyn_proxybusobject child);

		/// <summary>
		/// Remove a child object and any descendants it may have.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object off of which the child object is to be removed</param>
		/// <param name="path">Absolute or relative (to this alljoyn_proxybusobject) object path.</param>
		/// <returns>- #ER_OK if successful.
		/// - #ER_BUS_BAD_CHILD_PATH if the path given was not a valid path
		/// - #ER_BUS_OBJ_NOT_FOUND if the Child object was not found
		/// - #ER_FAIL any other unexpected error.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_removechild(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string path);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_removechild(alljoyn_proxybusobject proxyObj, const char* path);

		/// <summary>
		/// Query the remote object on the bus to determine the interfaces and
		/// children that exist. Use this information to populate this proxy's
		/// interfaces and children.
		/// </summary>
		/// <remarks>
		/// <para>This call causes messages to be send on the bus, therefore it cannot
		/// be called within AllJoyn callbacks (method/signal/reply handlers or
		/// ObjectRegistered callbacks, etc.)
		/// </para>
		/// </remarks>
		/// <param name="proxyObj">The proxy bus object that will query the remote object.</param>
		/// <returns>- #ER_OK if successful
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_introspectremoteobject(IntPtr proxyObj);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_introspectremoteobject(alljoyn_proxybusobject proxyObj);

		/// <summary>
		/// Query the remote object on the bus to determine the interfaces and
		/// children that exist. Use this information to populate this object's
		/// interfaces and children.
		/// </summary>
		/// <remarks>
		/// <para>This call executes asynchronously. When the introspection response
		/// is received from the actual remote object, this alljoyn_proxybusobject will
		/// be updated and the callback will be called.
		/// </para>
		/// <para>This call exists primarily to allow introspection of remote objects
		/// to be done inside AllJoyn method/signal/reply handlers and ObjectRegistered
		/// callbacks.
		/// </para>
		/// </remarks>
		/// <param name="proxyObj">The proxy bus object that will query the remote object.</param>
		/// <param name="callback">Method on listener that will be called.</param>
		/// <param name="context">User defined context which will be passed as-is to callback.</param>
		/// <returns>- #ER_OK if successful.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_introspectremoteobjectasync(IntPtr proxyObj, alljoyn_proxybusobject_listener_introspectcb_ptr callback, IntPtr context);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_introspectremoteobjectasync(alljoyn_proxybusobject proxyObj, alljoyn_proxybusobject_listener_introspectcb_ptr callback, void* context);

		/// <summary>
		/// Get a property from an interface on the remote object.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object the property will be read from</param>
		/// <param name="iface">Name of interface to retrieve property from.</param>
		/// <param name="property">The name of the property to get.</param>
		/// <param name="value">Property value.</param><!-- out -->
		/// <returns>- #ER_OK if the property was obtained.
		/// - #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the no such interface on this remote object.
		/// - #ER_BUS_NO_SUCH_PROPERTY if the property does not exist</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_getproperty(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface, [MarshalAs(UnmanagedType.LPStr)]string property, IntPtr value);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_getproperty(alljoyn_proxybusobject proxyObj, const char* iface, const char* property, alljoyn_msgarg value);

		/// <summary>
		/// Make an asynchronous request to get a property from an interface on the remote object.
		/// The property value is passed to the callback function.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object the property will be read from</param>
		/// <param name="iface">Name of interface to retrieve property from.</param>
		/// <param name="property">The name of the property to get.</param>
		/// <param name="callback">Function that will be called when the getproperty operation is completed.</param>
		/// <param name="timeout">Timeout specified in milliseconds to wait for a reply.Recommended default #ALLJOYN_MESSAGE_DEFAULT_TIMEOUT which is 25000 ms.</param>
		/// <param name="context">User defined context which will be passed as-is to callback.</param>
		/// <returns>- #ER_OK if the request to get the property was successfully issued .
		/// - #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the no such interface on this remote object.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_getpropertyasync(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface, [MarshalAs(UnmanagedType.LPStr)]string property, alljoyn_proxybusobject_listener_getpropertycb_ptr callback, UInt32 timeout, IntPtr context);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_getpropertyasync(alljoyn_proxybusobject proxyObj,const char* iface,const char* property,alljoyn_proxybusobject_listener_getpropertycb_ptr callback,uint32_t timeout,void* context);

		/// <summary>
		/// Get all properties from an interface on the remote object.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object the properties will be read from</param>
		/// <param name="iface">Name of interface to retrieve all properties from.</param>
		/// <param name="values">Property values returned as an array of dictionary entries, signature "a{sv}".</param><!-- out -->
		/// <returns>- #ER_OK if the property was obtained.
		/// - #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the no such interface on this remote object.
		/// - #ER_BUS_NO_SUCH_PROPERTY if the property does not exist</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_getallproperties(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface, IntPtr values);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_getallproperties(alljoyn_proxybusobject proxyObj, const char* iface, alljoyn_msgarg values);

		/// <summary>
		/// Make an asynchronous request to get all properties from an interface on the remote object.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object the properties will be read from</param>
		/// <param name="iface">Name of interface to retrieve properties from.</param>
		/// <param name="callback">Function that will be called when the getallproperties operation is completed.</param>
		/// <param name="timeout">Timeout specified in milliseconds to wait for a replyRecommended default #ALLJOYN_MESSAGE_DEFAULT_TIMEOUT which is 25000 ms.</param>
		/// <param name="context">User defined context which will be passed as-is to callback.</param>
		/// <returns>- #ER_OK if the request to get all properties was successfully issued .
		/// - #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the no such interface on this remote object.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_getallpropertiesasync(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface, alljoyn_proxybusobject_listener_getallpropertiescb_ptr callback, UInt32 timeout, IntPtr context);
		// extern AJ_API QStatus AJ_CALL  alljoyn_proxybusobject_getallpropertiesasync(alljoyn_proxybusobject proxyObj,const char* iface,alljoyn_proxybusobject_listener_getallpropertiescb_ptr callback,uint32_t timeout,void* context);

		/// <summary>
		/// Set a property on an interface on the remote object.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object the property will be set on</param>
		/// <param name="iface">Interface that holds the property</param>
		/// <param name="property">The name of the property to set</param>
		/// <param name="value">The value to set</param>
		/// <returns>- #ER_OK if the property was set
		/// - #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the no such interface on this remote object.
		/// - #ER_BUS_NO_SUCH_PROPERTY if the property does not exist</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_setproperty(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface, [MarshalAs(UnmanagedType.LPStr)]string property, IntPtr value);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_setproperty(alljoyn_proxybusobject proxyObj, const char* iface, const char* property, alljoyn_msgarg value);

		/// <summary>
		/// Function to register a handler for property change events.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object that will register the property changedlistener</param>
		/// <param name="iface">Remote object's interface on which the property is defined.</param>
		/// <param name="properties">List of names of properties to monitor.</param>
		/// <param name="numProperties">Number of properties to monitor.</param>
		/// <param name="callback">Method on listener that will be called.</param>
		/// <param name="context">User defined context which will be passed as-is to callback.</param>
		/// <returns>- #ER_OK if the handler was registered successfully
		/// - #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the specified interfaces does not
		/// exist on the remote object.
		/// - #ER_BUS_NO_SUCH_PROPERTY if the property does not exist</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_registerpropertieschangedlistener(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)]string[] properties, UInt64 numProperties, alljoyn_proxybusobject_listener_propertieschanged_ptr callback, IntPtr context);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_registerpropertieschangedlistener(alljoyn_proxybusobject proxyObj,const char* iface,const char** properties,size_t numProperties,alljoyn_proxybusobject_listener_propertieschanged_ptr callback,void* context);

		/// <summary>
		/// Function to unregister a handler for property change events.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object that will register the property changed listener.</param>
		/// <param name="iface">Remote object's interface on which the properties are defined.</param>
		/// <param name="callback">Method on listener that used to be called.</param>
		/// <returns>- #ER_OK if the handler was unregistered successfully
		/// - #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the specified interfaces does not exist on the remote object.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_unregisterpropertieschangedlistener(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface, alljoyn_proxybusobject_listener_propertieschanged_ptr callback);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_unregisterpropertieschangedlistener(alljoyn_proxybusobject proxyObj,const char* iface,alljoyn_proxybusobject_listener_propertieschanged_ptr callback);

		/// <summary>
		/// Make an asynchronous request to set a property on an interface on the remote object.
		/// A callback function reports the success or failure of there operation.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object the property will be set o</param>
		/// <param name="iface">Remote object's interface on which the property is defined.</param>
		/// <param name="property">The name of the property to set.</param>
		/// <param name="value">The value to set</param>
		/// <param name="callback">Function that will be called when the setproperty operation is completed.</param>
		/// <param name="timeout">Timeout specified in milliseconds to wait for a replyRecommended default #ALLJOYN_MESSAGE_DEFAULT_TIMEOUT which is 25000 ms.</param>
		/// <param name="context">User defined context which will be passed as-is to callback.</param>
		/// <returns>- #ER_OK if the request to set the property was successfully issued .
		/// - #ER_BUS_OBJECT_NO_SUCH_INTERFACE if the specified interfaces does not exist on the remote object.
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_setpropertyasync(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface, [MarshalAs(UnmanagedType.LPStr)]string property, IntPtr value, alljoyn_proxybusobject_listener_setpropertycb_ptr callback, UInt32 timeout, IntPtr context);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_setpropertyasync(alljoyn_proxybusobject proxyObj,const char* iface,const char* property,alljoyn_msgarg value,alljoyn_proxybusobject_listener_setpropertycb_ptr callback,uint32_t timeout,void* context);

		/// <summary>
		/// Make a synchronous method call
		/// </summary>
		/// <param name="proxyObj">alljoyn_proxybusobject on which to call the method.</param>
		/// <param name="ifaceName">Name of interface.</param>
		/// <param name="methodName">Name of method.</param>
		/// <param name="args">The arguments for the method call (can be NULL)</param>
		/// <param name="numArgs">The number of arguments</param>
		/// <param name="replyMsg">The reply message received for the method call</param>
		/// <param name="timeout">Timeout specified in milliseconds to wait for a reply</param>
		/// <param name="flags">Logical OR of the message flags for this method call. The following flags apply to method calls:- If #ALLJOYN_MESSAGE_FLAG_ENCRYPTED is set the message is authenticated and the payload if any is encrypted.
		/// - If #ALLJOYN_MESSAGE_FLAG_AUTO_START is set the bus will attempt to start a service if it is not running.</param>
		/// <returns>- #ER_OK if the method call succeeded and the reply message type is #ALLJOYN_MESSAGE_METHOD_RET
		/// - #ER_BUS_REPLY_IS_ERROR_MESSAGE if the reply message type is #ALLJOYN_MESSAGE_ERROR</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_methodcall(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string ifaceName, [MarshalAs(UnmanagedType.LPStr)]string methodName, IntPtr args, UInt64 numArgs, IntPtr replyMsg, UInt32 timeout, byte flags);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_methodcall(alljoyn_proxybusobject proxyObj,const char* ifaceName,const char* methodName,const alljoyn_msgarg args,size_t numArgs,alljoyn_message replyMsg,uint32_t timeout,uint8_t flags);

		/// <summary>
		/// Make a synchronous method call from this object
		/// </summary>
		/// <param name="proxyObj">alljoyn_proxybusobject on which to call the method.</param>
		/// <param name="method">The alljoyn_interfacedescription_member specifying the method being invoked.</param>
		/// <param name="args">The arguments for the method call (can be NULL)</param>
		/// <param name="numArgs">The number of arguments</param>
		/// <param name="replyMsg">The reply message received for the method call</param>
		/// <param name="timeout">Timeout specified in milliseconds to wait for a reply.Recommended default #ALLJOYN_MESSAGE_DEFAULT_TIMEOUT which is 25000 ms.</param>
		/// <param name="flags">Logical OR of the message flags for this method call. The following flags apply to method calls:- If #ALLJOYN_MESSAGE_FLAG_ENCRYPTED is set the message is authenticated and the payload if any is encrypted.
		/// - If #ALLJOYN_MESSAGE_FLAG_AUTO_START is set the bus will attempt to start a service if it is not running.
		/// Set value to '0' for no flags.</param>
		/// <returns>- #ER_OK if the method call succeeded and the reply message type is #ALLJOYN_MESSAGE_METHOD_RET
		/// - #ER_BUS_REPLY_IS_ERROR_MESSAGE if the reply message type is #ALLJOYN_MESSAGE_ERROR</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_methodcall_member(IntPtr proxyObj, alljoyn_interfacedescription_member method, IntPtr args, UInt64 numArgs, IntPtr replyMsg, UInt32 timeout, byte flags);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_methodcall_member(alljoyn_proxybusobject proxyObj,const alljoyn_interfacedescription_member method,const alljoyn_msgarg args,size_t numArgs,alljoyn_message replyMsg,uint32_t timeout,uint8_t flags);

		/// <summary>
		/// Make a fire-and-forget method call from this object. The caller will not be able to tell if
		/// the method call was successful or not. This is equivalent to calling MethodCall() with
		/// flags == ALLJOYN_FLAG_NO_REPLY_EXPECTED. Because this call doesn't block it can be made from
		/// within a signal handler.
		/// </summary>
		/// <param name="proxyObj">alljoyn_proxybusobject on which to call the method.</param>
		/// <param name="ifaceName">Name of interface.</param>
		/// <param name="methodName">Name of method.</param>
		/// <param name="args">The arguments for the method call (can be NULL)</param>
		/// <param name="numArgs">The number of arguments</param>
		/// <param name="flags">Logical OR of the message flags for this method call. The following flags apply to method calls:- If #ALLJOYN_MESSAGE_FLAG_ENCRYPTED is set the message is authenticated and the payload if any is encrypted.
		/// - If #ALLJOYN_MESSAGE_FLAG_AUTO_START is set the bus will attempt to start a service if it is not running.
		/// Set value to '0' for no flags.</param>
		/// <returns>- #ER_OK if the method call succeeded</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_methodcall_noreply(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string ifaceName, [MarshalAs(UnmanagedType.LPStr)]string methodName, IntPtr args, UInt64 numArgs, byte flags);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_methodcall_noreply(alljoyn_proxybusobject proxyObj,const char* ifaceName,const char* methodName,const alljoyn_msgarg args,size_t numArgs,uint8_t flags);

		/// <summary>
		/// Make a fire-and-forget method call from this object. The caller will not be able to tell if
		/// the method call was successful or not. This is equivalent to calling MethodCall() with
		/// flags == ALLJOYN_FLAG_NO_REPLY_EXPECTED. Because this call doesn't block it can be made from
		/// within a signal handler.
		/// </summary>
		/// <param name="proxyObj">alljoyn_proxybusobject on which to call the method.</param>
		/// <param name="method">Method being invoked.</param>
		/// <param name="args">The arguments for the method call (can be NULL)</param>
		/// <param name="numArgs">The number of arguments</param>
		/// <param name="flags">Logical OR of the message flags for this method call. The following flags apply to method calls:- If #ALLJOYN_MESSAGE_FLAG_ENCRYPTED is set the message is authenticated and the payload if any is encrypted.
		/// - If #ALLJOYN_MESSAGE_FLAG_AUTO_START is set the bus will attempt to start a service if it is not running.
		/// Set value to '0' for no flags.</param>
		/// <returns>- #ER_OK if the method call succeeded</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_methodcall_member_noreply(IntPtr proxyObj, alljoyn_interfacedescription_member method, IntPtr args, UInt64 numArgs, byte flags);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_methodcall_member_noreply(alljoyn_proxybusobject proxyObj,const alljoyn_interfacedescription_member method,const alljoyn_msgarg args,size_t numArgs,uint8_t flags);

		/// <summary>
		/// Make an asynchronous method call from this object
		/// </summary>
		/// <param name="proxyObj">alljoyn_proxybusobject on which to call the method</param>
		/// <param name="ifaceName">Name of interface for method.</param>
		/// <param name="methodName">Name of method.</param>
		/// <param name="replyFunc">The function that is called to deliver the reply</param>
		/// <param name="args">The arguments for the method call (can be NULL)</param>
		/// <param name="numArgs">The number of arguments (can be 0)</param>
		/// <param name="context">User-defined context that will be returned to the reply handlerRecommended default NULL.</param>
		/// <param name="timeout">Timeout specified in milliseconds to wait for a replyRecommended default #ALLJOYN_MESSAGE_DEFAULT_TIMEOUT which is 25000 ms</param>
		/// <param name="flags">Logical OR of the message flags for this method call. The following flags apply to method calls:- If #ALLJOYN_MESSAGE_FLAG_ENCRYPTED is set the message is authenticated and the payload if any is encrypted.
		/// - If #ALLJOYN_MESSAGE_FLAG_AUTO_START is set the bus will attempt to start a service if it is not running.
		/// Set value to '0' for no flags.</param>
		/// <returns>- ER_OK if successful
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_methodcallasync(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string ifaceName, [MarshalAs(UnmanagedType.LPStr)]string methodName, alljoyn_messagereceiver_replyhandler_ptr replyFunc, IntPtr args, UInt64 numArgs, IntPtr context, UInt32 timeout, byte flags);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_methodcallasync(alljoyn_proxybusobject proxyObj,const char* ifaceName,const char* methodName,alljoyn_messagereceiver_replyhandler_ptr replyFunc,const alljoyn_msgarg args,size_t numArgs,void* context,uint32_t timeout,uint8_t flags);

		/// <summary>
		/// Make an asynchronous method call from this object
		/// </summary>
		/// <param name="proxyObj">alljoyn_proxybusobject on which to call the method</param>
		/// <param name="method">Method being invoked.</param>
		/// <param name="replyFunc">The function that is called to deliver the reply</param>
		/// <param name="args">The arguments for the method call (can be NULL)</param>
		/// <param name="numArgs">The number of arguments (can be 0)</param>
		/// <param name="context">User-defined context that will be returned to the reply handlerRecommended default NULL.</param>
		/// <param name="timeout">Timeout specified in milliseconds to wait for a replyRecommended default #ALLJOYN_MESSAGE_DEFAULT_TIMEOUT which is 25000 ms</param>
		/// <param name="flags">Logical OR of the message flags for this method call. The following flags apply to method calls:- If #ALLJOYN_MESSAGE_FLAG_ENCRYPTED is set the message is authenticated and the payload if any is encrypted.
		/// - If #ALLJOYN_MESSAGE_FLAG_AUTO_START is set the bus will attempt to start a service if it is not running.
		/// Set value to '0' for no flags.</param>
		/// <returns>- ER_OK if successful
		/// - An error status otherwise</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_methodcallasync_member(IntPtr proxyObj, alljoyn_interfacedescription_member method, alljoyn_messagereceiver_replyhandler_ptr replyFunc, IntPtr args, UInt64 numArgs, IntPtr context, UInt32 timeout, byte flags);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_methodcallasync_member(alljoyn_proxybusobject proxyObj,const alljoyn_interfacedescription_member method,alljoyn_messagereceiver_replyhandler_ptr replyFunc,const alljoyn_msgarg args,size_t numArgs,void* context,uint32_t timeout,uint8_t flags);

		/// <summary>
		/// Initialize this proxy object from an XML string. Calling this function does several things:
		/// </summary>
		/// <remarks>
		/// <para>-# Create and register any new InterfaceDescription(s) that are mentioned in the XML.
		/// (Interfaces that are already registered with the bus are left "as-is".)
		/// -# Add all the interfaces mentioned in the introspection data to this alljoyn_proxybusobject.
		/// -# Recursively create any child alljoyn_proxybusobject(s) and create/add their associated @n
		/// interfaces as mentioned in the XML. Then add the descendant object(s) to the appropriate
		/// descendant of this alljoyn_proxybusobject (in the children collection). If the named
		/// child object already exists as a child of the appropriate alljoyn_proxybusobject, then it is
		/// updated to include any new interfaces or children mentioned in the XML.
		/// </para>
		/// <para>Note that when this function fails during parsing, the return code will be set accordingly.
		/// However, any interfaces which were successfully parsed prior to the failure
		/// may be registered with the bus. Similarly, any objects that were successfully created
		/// before the failure will exist in this object's set of children.
		/// </para>
		/// </remarks>
		/// <param name="proxyObj">alljoyn_proxybusobject which will be initialized from the XML string</param>
		/// <param name="xml">An XML string in DBus introspection format.</param>
		/// <param name="identifier">An optional identifying string to include in error logging messages.</param>
		/// <returns>- #ER_OK if parsing is completely successful.
		/// - An error status otherwise.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_parsexml(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string xml, [MarshalAs(UnmanagedType.LPStr)]string identifier);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_parsexml(alljoyn_proxybusobject proxyObj, const char* xml, const char* identifier);

		/// <summary>
		/// Explicitly secure the connection to the remote peer for this proxy object. Peer-to-peer
		/// connections can only be secured if EnablePeerSecurity() was previously called on the bus
		/// attachment for this proxy object. If the peer-to-peer connection is already secure this
		/// function does nothing. Note that peer-to-peer connections are automatically secured when a
		/// method call or signal requiring encryption is sent or received.
		/// </summary>
		/// <remarks>
		/// <para>This call causes messages to be sent on the bus, therefore it cannot be called within AllJoyn
		/// callbacks (method/signal/reply handlers or ObjectRegistered callbacks, etc.)
		/// </para>
		/// </remarks>
		/// <param name="proxyObj">alljoyn_proxybusobject to explicitly set up a secure a connection</param>
		/// <param name="forceAuth">If true, forces an re-authentication even if the peer connection is alreadyauthenticated.
		/// Recommended default QCC_FALSE</param>
		/// <returns>- #ER_OK if the connection was secured or an error status indicating that the
		/// connection could not be secured.
		/// - #ER_BUS_NO_AUTHENTICATION_MECHANISM if alljoyn_busattachment_enablepeersecurity()
		/// has not been called.
		/// - #ER_AUTH_FAIL if the attempt(s) to authenticate the peer failed.
		/// - Other error status codes indicating a failure.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_secureconnection(IntPtr proxyObj, Int32 forceAuth);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_secureconnection(alljoyn_proxybusobject proxyObj, QCC_BOOL forceAuth);

		/// <summary>
		/// Asynchronously secure the connection to the remote peer for this proxy object.
		/// Peer-to-peer connections can only be secured if alljoyn_busattachment_enablepeersecurity()
		/// was previously called on the bus attachment for this proxy object. If the peer-to-peer
		/// connection is already secure this function does nothing. Note that peer-to-peer
		/// connections are automatically secured when a method call or signal requiring
		/// encryption is sent or received.
		/// </summary>
		/// <remarks>
		/// <para>Notification of success or failure is via the AuthListener passed to
		/// alljoyn_busattachment_enablepeersecurity().
		/// </para>
		/// </remarks>
		/// <param name="proxyObj">alljoyn_proxybusobject to explicitly set up a secure a connection</param>
		/// <param name="forceAuth">If true, forces an re-authentication even if the peer connection is alreadyauthenticated.
		/// Recommended default QCC_FALSE</param>
		/// <returns>- #ER_OK if securing could begin.
		/// - #ER_BUS_NO_AUTHENTICATION_MECHANISM if alljoyn_busattachment_enablepeersecurity() has not been called.
		/// - Other error status codes indicating a failure.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_secureconnectionasync(IntPtr proxyObj, Int32 forceAuth);
		// extern AJ_API QStatus AJ_CALL alljoyn_proxybusobject_secureconnectionasync(alljoyn_proxybusobject proxyObj, QCC_BOOL forceAuth);

		/// <summary>
		/// Returns a pointer to an interface description. Returns NULL if the object does not implement
		/// the requested interface.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object to obtain an interface description from.</param>
		/// <param name="iface">The name of interface to get.</param>
		/// <returns>- A pointer to the requested interface description.
		/// - NULL if requested interface is not implemented or not found</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_getinterface(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface);
		// extern AJ_API const alljoyn_interfacedescription AJ_CALL alljoyn_proxybusobject_getinterface(alljoyn_proxybusobject proxyObj, const char* iface);

		/// <summary>
		/// Returns the interfaces implemented by this object. Note that all proxy bus objects
		/// automatically inherit the "org.freedesktop.DBus.Peer" which provides the built-in "ping"
		/// method, so this method always returns at least that one interface.
		/// </summary>
		/// <param name="proxyObj">The proxy bus object to obtain an interface descriptions from.</param>
		/// <param name="ifaces">A pointer to an InterfaceDescription array to receive the interfaces. Can be NULL inwhich case no interfaces are returned and the return value gives the number
		/// of interfaces available.</param>
		/// <param name="numIfaces">The size of the InterfaceDescription array. If this value is smaller than the totalnumber of interfaces only numIfaces will be returned.
		/// (DEFAULT) if numInterfaces is 0 then an array of all the interfaces will be returned.</param>
		/// <returns>The number of interfaces returned or the total number of interfaces if ifaces is NULL.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt64 alljoyn_proxybusobject_getinterfaces(IntPtr proxyObj, IntPtr ifaces, UInt64 numIfaces);
		// extern AJ_API size_t AJ_CALL alljoyn_proxybusobject_getinterfaces(alljoyn_proxybusobject proxyObj, const alljoyn_interfacedescription* ifaces, size_t numIfaces);

		/// <summary>
		/// Return the absolute object path for the remote object.
		/// </summary>
		/// <param name="proxyObj">the proxy bus object to read the object path from.</param>
		/// <returns>Object path</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_getpath(IntPtr proxyObj);
		// extern AJ_API const char* AJ_CALL alljoyn_proxybusobject_getpath(alljoyn_proxybusobject proxyObj);

		/// <summary>
		/// Return the remote service name for this object.
		/// </summary>
		/// <param name="proxyObj">the proxy bus object to read the service name (Bus Name) path from.</param>
		/// <returns>Service name (typically a well-known service name but may be a unique name)</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_getservicename(IntPtr proxyObj);
		// extern AJ_API const char* AJ_CALL alljoyn_proxybusobject_getservicename(alljoyn_proxybusobject proxyObj);

		/// <summary>
		/// Return the remote unique name for this object.
		/// </summary>
		/// <param name="proxyObj">the proxy bus object to read the unique name (Bus Name) path from.</param>
		/// <returns>Unique name</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_getuniquename(IntPtr proxyObj);
		// extern AJ_API const char* AJ_CALL alljoyn_proxybusobject_getuniquename(alljoyn_proxybusobject proxyObj);

		/// <summary>
		/// Return the session Id for this object.
		/// </summary>
		/// <param name="proxyObj">the proxy bus object we wish to obtain the session ID from.</param>
		/// <returns>Session Id</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_getsessionid(IntPtr proxyObj);
		// extern AJ_API alljoyn_sessionid AJ_CALL alljoyn_proxybusobject_getsessionid(alljoyn_proxybusobject proxyObj);

		/// <summary>
		/// Tests if this object implements the requested interface.
		/// </summary>
		/// <param name="proxyObj">the proxy bus object we wish check for the interface</param>
		/// <param name="iface">The interface to check</param>
		/// <returns>true if the object implements the requested interface</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_implementsinterface(IntPtr proxyObj, [MarshalAs(UnmanagedType.LPStr)]string iface);
		// extern AJ_API QCC_BOOL AJ_CALL alljoyn_proxybusobject_implementsinterface(alljoyn_proxybusobject proxyObj, const char* iface);

		/// <summary>
		/// create a copy of a proxybusobject.  This will create a new alljoyn_proxybusobject and
		/// must be cleaned up using alljoyn_proxybusobject_destroy.
		/// </summary>
		/// <param name="source">the alljoyn_proxybusobject to be copied</param>
		/// <returns>copy of the alljoyn_proxybusobject argument is returned</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_copy(IntPtr source);
		// extern AJ_API alljoyn_proxybusobject AJ_CALL alljoyn_proxybusobject_copy(const alljoyn_proxybusobject source);

		/// <summary>
		/// Indicates if this is a valid (usable) proxy bus object.
		/// </summary>
		/// <param name="proxyObj">The alljoyn_proxybusobject to be checked for usability</param>
		/// <returns>true if a valid proxy bus object, false otherwise.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_isvalid(IntPtr proxyObj);
		// extern AJ_API QCC_BOOL AJ_CALL alljoyn_proxybusobject_isvalid(alljoyn_proxybusobject proxyObj);

		/// <summary>
		/// Indicates if the remote object for this proxy bus object is secure.
		/// </summary>
		/// <param name="proxyObj">The alljoyn_proxybusobject to be checked for usability</param>
		/// <returns>true if the object is secure</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_proxybusobject_issecure(IntPtr proxyObj);
		// extern AJ_API QCC_BOOL AJ_CALL alljoyn_proxybusobject_issecure(alljoyn_proxybusobject proxyObj);

		/// <summary>
		/// Enable property caching for this proxy bus object.
		/// </summary>
		/// <param name="proxyObj">The alljoyn_proxybusobject for which caching must be enabled</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_proxybusobject_enablepropertycaching(IntPtr proxyObj);
		// extern AJ_API void AJ_CALL alljoyn_proxybusobject_enablepropertycaching(alljoyn_proxybusobject proxyObj);


    }
}