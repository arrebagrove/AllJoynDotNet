// Generated from Session.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
//
    public partial class Session : AllJoynWrapper
    {
        internal Session(IntPtr handle) : base(handle) { }
		/// <summary>
		/// Construct an alljoyn_sessionopts with specific parameters.
		/// </summary>
		/// <param name="traffic">Type of traffic.</param>
		/// <param name="isMultipoint">true iff session supports multipoint (greater than two endpoints).</param>
		/// <param name="proximity">Proximity constraint bitmask.</param>
		/// <param name="transports">Allowed transport types bitmask.</param>
		/// <returns>the allocated alljoyn_sessionopts</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern IntPtr alljoyn_sessionopts_create(byte traffic, Int32 isMultipoint, byte proximity, UInt16 transports);
		// extern AJ_API alljoyn_sessionopts AJ_CALL alljoyn_sessionopts_create(uint8_t traffic, QCC_BOOL isMultipoint,uint8_t proximity, alljoyn_transportmask transports);

		/// <summary>
		/// Destroy an alljoyn_sessionopts created with alljoyn_sessionopts_create.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts to destroy</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern void alljoyn_sessionopts_destroy(IntPtr opts);
		// extern AJ_API void AJ_CALL alljoyn_sessionopts_destroy(alljoyn_sessionopts opts);

		/// <summary>
		/// Get accessor for the traffic member of alljoyn_sessionopts.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts</param>
		/// <returns>Traffic type specified by the specified alljoyn_sessionopts.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern byte alljoyn_sessionopts_get_traffic(IntPtr opts);
		// extern AJ_API uint8_t AJ_CALL alljoyn_sessionopts_get_traffic(const alljoyn_sessionopts opts);

		/// <summary>
		/// Set accessor for the traffic member of alljoyn_sessionopts.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts</param>
		/// <param name="traffic">Traffic type to set in the alljoyn_sessionopts.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern void alljoyn_sessionopts_set_traffic(IntPtr opts, byte traffic);
		// extern AJ_API void AJ_CALL alljoyn_sessionopts_set_traffic(alljoyn_sessionopts opts, uint8_t traffic);

		/// <summary>
		/// Get accessor for the isMultipoint member of alljoyn_sessionopts.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts</param>
		/// <returns>Multipoint value specified by the specified alljoyn_sessionopts.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_sessionopts_get_multipoint(IntPtr opts);
		// extern AJ_API QCC_BOOL AJ_CALL alljoyn_sessionopts_get_multipoint(const alljoyn_sessionopts opts);

		/// <summary>
		/// Set accessor for the isMultipoint member of alljoyn_sessionopts.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts</param>
		/// <param name="isMultipoint">Multipoint value to set in the alljoyn_sessionopts.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern void alljoyn_sessionopts_set_multipoint(IntPtr opts, Int32 isMultipoint);
		// extern AJ_API void AJ_CALL alljoyn_sessionopts_set_multipoint(alljoyn_sessionopts opts, QCC_BOOL isMultipoint);

		/// <summary>
		/// Get accessor for the proximity member of alljoyn_sessionopts.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts</param>
		/// <returns>Proximity specified by the specified alljoyn_sessionopts.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern byte alljoyn_sessionopts_get_proximity(IntPtr opts);
		// extern AJ_API uint8_t AJ_CALL alljoyn_sessionopts_get_proximity(const alljoyn_sessionopts opts);

		/// <summary>
		/// Set accessor for the proximity member of alljoyn_sessionopts.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts</param>
		/// <param name="proximity">Proximity value to set in the alljoyn_sessionopts.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern void alljoyn_sessionopts_set_proximity(IntPtr opts, byte proximity);
		// extern AJ_API void AJ_CALL alljoyn_sessionopts_set_proximity(alljoyn_sessionopts opts, uint8_t proximity);

		/// <summary>
		/// Get accessor for the transports member of alljoyn_sessionopts.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts</param>
		/// <returns>Transports allowed by the specified alljoyn_sessionopts.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern UInt16 alljoyn_sessionopts_get_transports(IntPtr opts);
		// extern AJ_API alljoyn_transportmask AJ_CALL alljoyn_sessionopts_get_transports(const alljoyn_sessionopts opts);

		/// <summary>
		/// Set accessor for the transports member of alljoyn_sessionopts.
		/// </summary>
		/// <param name="opts">alljoyn_sessionopts</param>
		/// <param name="transports">change the transports allowed by the specified alljoyn_sessionopts.</param>
		/// 
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern void alljoyn_sessionopts_set_transports(IntPtr opts, UInt16 transports);
		// extern AJ_API void AJ_CALL alljoyn_sessionopts_set_transports(alljoyn_sessionopts opts, alljoyn_transportmask transports);

		/// <summary>
		/// Determine whether one alljoyn_sessionopts is compatible with the alljoyn_sessionopts
		/// offered by other
		/// </summary>
		/// <remarks>
		/// <para>Compatibility means that the alljoyn_sessionopts share at least one of each
		/// - transport type
		/// - traffic type
		/// - proximity type
		/// </para>
		/// <para>Note that multipoint support is not a condition of compatibility
		/// </para>
		/// </remarks>
		/// <param name="one">Options to be compared against other.</param>
		/// <param name="other">Options to be compared against one.</param>
		/// <returns>QCC_TRUE iff this alljoyn_sessionopts can use the option set offered by other.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_sessionopts_iscompatible(IntPtr one, IntPtr other);
		// extern AJ_API QCC_BOOL AJ_CALL alljoyn_sessionopts_iscompatible(const alljoyn_sessionopts one, const alljoyn_sessionopts other);

		/// <summary>
		/// Compare two alljoyn_sessionopts.
		/// </summary>
		/// <param name="one">Options to be compared against other.</param>
		/// <param name="other">Options to be compared against one.</param>
		/// <returns>0 if the alljoyn_sessionopts are equal, 1 if one > other, -1 if one < other.</returns>
		[DllImport(Constants.DLL_IMPORT_TARGET)]
		internal static extern Int32 alljoyn_sessionopts_cmp(IntPtr one, IntPtr other);
		// extern AJ_API int32_t AJ_CALL alljoyn_sessionopts_cmp(const alljoyn_sessionopts one, const alljoyn_sessionopts other);


    }
}