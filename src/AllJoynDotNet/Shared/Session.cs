// Generated from Session.h

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace AllJoynDotNet
{
    [Flags]
    public enum Transport : ushort
    {
        None = 0x0000, //         (alljoyn_transportmask)0x0000   /**< no transports */
        Local = 0x0001, //        (alljoyn_transportmask)0x0001   /**< Local (same device) transport */
        Tcp = 0x0004, //          (alljoyn_transportmask)0x0004   /**< TCP/IP transport */
        Udp = 0x0100, //          (alljoyn_transportmask)0x0100   /**< UDP/IP transport */
        Experimental = 0x8000, // (alljoyn_transportmask)0x8000   /**< Placeholder for expermimental transports */

        IP = Tcp | Udp, //           (ALLJOYN_TRANSPORT_TCP | ALLJOYN_TRANSPORT_UDP)  /**< Any IP-based transport */
        Any = Local | IP, //          (ALLJOYN_TRANSPORT_LOCAL | ALLJOYN_TRANSPORT_IP) /**< ANY non-experimental transport */

        //Bluetooth, // (alljoyn_transportmask)(attempted_use_of_deprecated_definition = 0x0002)   /**< Bluetooth transport */
        //Wlan, //      (alljoyn_transportmask)(attempted_use_of_deprecated_definition = 0x0004)   /**< Wireless local-area network transport */
        //Wwan, //      (alljoyn_transportmask)(attempted_use_of_deprecated_definition = 0x0008)   /**< Wireless wide-area network transport */
        //Lan, //       (alljoyn_transportmask)(attempted_use_of_deprecated_definition = 0x0010)   /**< Wired local-area network transport */
        //Proximity, // (alljoyn_transportmask)(attempted_use_of_deprecated_definition = 0x0040)   /**< Transport using WinRT Proximity Framework */
        //Wfd //       (alljoyn_transportmask)(attempted_use_of_deprecated_definition = 0x0080)   /**< Transport using Wi-Fi Direct transport */

    }
    [Flags]
    public enum TrafficType : byte
    {
        /// <summary>
        /// Session carries message traffic
        /// </summary>
        Messages = 0x01,
        /// <summary>
        /// Session carries an unreliable (lossy) byte stream
        /// </summary>
        RawUnreliable = 0x02,
        /// <summary>
        /// Session carries a reliable byte stream
        /// </summary>
        RawReliable = 0x04
    }
    public enum Proximity : byte
    {
        /// <summary>
        /// Limit the session to the same physical device 
        /// </summary>
        Physical = 0x01,
        /// <summary>
        /// Limit the session to network proximity
        /// </summary>
        Network = 0x02,
        /// <summary>
        /// Accept any proximity options
        /// </summary>
        Any = 0xff
    }
    public partial class Session : AllJoynWrapper
    {
        public Session(TrafficType traffic, bool isMultiPoint, Proximity proximity, Transport transports)
            : base(CreateHandle(traffic, isMultiPoint, proximity, transports))
        {

        }

        private static IntPtr CreateHandle(TrafficType traffic, bool isMultiPoint, Proximity proximity, Transport transports)
        {
            var handle = alljoyn_sessionopts_create((byte)traffic, isMultiPoint.ToQccBool(), (byte)proximity, (ushort)transports);
            if (handle == IntPtr.Zero)
                throw new InvalidOperationException("Could not create session options");
            return handle;
        }
    }
}